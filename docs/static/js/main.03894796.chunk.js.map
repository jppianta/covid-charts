{"version":3,"sources":["Footer.js","Header.js","Charts/History.js","Charts/Evolution.js","Content/Content.js","App.js","serviceWorker.js","index.js"],"names":["Option","Select","Footer","Layout","AppFooter","mode","style","width","placeholder","defaultValue","onChange","this","props","countries","map","country","key","name","Component","Header","AppHeader","Modal","info","title","content","href","target","onOk","className","type","shape","onClick","InfoOutlined","HistoryChart","updateChartSize","element","document","getElementById","chart","changeSize","offsetWidth","offsetHeight","window","removeEventListener","data","values","Object","keys","confirmed","history","date","Date","cases","concat","apply","getMonth","getDate","getFullYear","parseData","changeData","line","position","color","point","tooltip","showTitle","axis","label","formatter","val","Number","parseDate","addEventListener","Chart","container","height","padding","renderer","scale","range","nice","showCrosshairs","shared","render","id","EvolutionChart","date1","date2","getTime","historyKeys","filter","sort","a","b","firstDay","index","time","daysBetweenDates","sync","min","Content","AppContent","margin","span","value","totalData","deaths","recovered","selectedData","App","state","loaded","onCountriesSelected","selectedCountries","setState","covidData","latest","locations","forEach","location","coordinates","provinces","history1","history2","typeMap","province","covidDataApi","all","then","getTotalData","Boolean","hostname","match","ReactDOM","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.03894796.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Select, Layout } from 'antd';\r\n\r\nconst { Option } = Select;\r\n\r\nconst { Footer } = Layout;\r\n\r\nexport class AppFooter extends Component {\r\n  render() {\r\n    return (\r\n      <Footer>\r\n        <Select\r\n          mode=\"multiple\"\r\n          style={{ width: '100%' }}\r\n          placeholder=\"Please select\"\r\n          defaultValue={[]}\r\n          onChange={this.props.onChange}\r\n        >\r\n          {\r\n            this.props.countries.map(country => <Option key={country.name}>{country.name}</Option>)\r\n          }\r\n        </Select>\r\n      </Footer>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { Layout, Modal, Button } from 'antd';\r\nimport { InfoOutlined } from '@ant-design/icons'\r\n\r\nconst { Header } = Layout;\r\n\r\nexport class AppHeader extends Component {\r\n  info() {\r\n    Modal.info({\r\n      title: 'Info',\r\n      content: (\r\n        <div>\r\n          <p>Page that aims to help people to analyze data about covid-19.</p>\r\n          <p>All information comes from the <a href=\"https://github.com/CSSEGISandData/COVID-19\" target=\"blank\">  2019 Novel Coronavirus COVID-19 (2019-nCoV) Data Repository.</a></p>\r\n        </div>\r\n      ),\r\n      onOk() { },\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Header className=\"header\">\r\n        <div className=\"header-title\">\r\n          Covid-19 Charts\r\n        </div>\r\n        <Button type=\"default\" shape=\"circle\" onClick={this.info}>\r\n          <InfoOutlined />\r\n        </Button>\r\n      </Header>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { Chart } from '@antv/g2';\r\n\r\nexport class HistoryChart extends Component {\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.updateChartSize)\r\n  }\r\n\r\n  updateChartSize = () => {\r\n    const element = document.getElementById('containerHistory')\r\n    this.chart.changeSize(element.offsetWidth - 10, element.offsetHeight - 10)\r\n  }\r\n\r\n  parseData(data) {\r\n    const values = data.map(country => {\r\n      return Object.keys(country.confirmed.history).map(date => (\r\n        { country: country.name, date: new Date(date), cases: country.confirmed.history[date] }\r\n      ));\r\n    });\r\n    return [].concat.apply([], values);\r\n  }\r\n\r\n  parseDate(date) {\r\n    return `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const data = this.parseData(this.props.data);\r\n    this.chart.changeData(data);\r\n\r\n    this.chart\r\n      .line()\r\n      .position('date*cases')\r\n      .color('country')\r\n      .shape('smooth');\r\n\r\n    this.chart\r\n      .point()\r\n      .position('date*cases')\r\n      .color('country')\r\n      .shape('circle');\r\n\r\n    this.chart.tooltip({ showTitle: false })\r\n\r\n    this.chart.axis('date', {\r\n      label: {\r\n        formatter: (val) => {\r\n          const date = new Date(Number(val));\r\n          return this.parseDate(date);\r\n        }\r\n      }\r\n    })\r\n\r\n    this.updateChartSize();\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('resize', this.updateChartSize)\r\n    const element = document.getElementById('containerHistory')\r\n    this.chart = new Chart({\r\n      container: element,\r\n      height: element.offsetHeight - 10,\r\n      padding: 50,\r\n      renderer: 'svg'\r\n    });\r\n    this.chart.tooltip({ showTitle: false })\r\n    this.chart.data(this.parseData(this.props.data));\r\n    this.chart.scale({\r\n      date: {\r\n        range: [0, 1],\r\n      },\r\n      cases: {\r\n        nice: true,\r\n      },\r\n    });\r\n\r\n    this.chart.tooltip({\r\n      showCrosshairs: true,\r\n      shared: true,\r\n    });\r\n\r\n    this.chart\r\n      .line()\r\n      .position('date*cases')\r\n      .color('country')\r\n      .shape('smooth');\r\n\r\n    this.chart\r\n      .point()\r\n      .position('date*cases')\r\n      .color('country')\r\n      .shape('circle');\r\n\r\n    this.chart.render();\r\n    this.updateChartSize();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"containerHistory\" className=\"container\" />\r\n    );\r\n  }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { Chart } from '@antv/g2';\r\n\r\nexport class EvolutionChart extends Component {\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.updateChartSize)\r\n  }\r\n\r\n  daysBetweenDates(date1, date2) {\r\n    const timeBetween = date2.getTime() - date1.getTime();\r\n    return timeBetween / (1000 * 60 * 60 * 24);\r\n  }\r\n\r\n  updateChartSize = () => {\r\n    const element = document.getElementById('containerEvolution')\r\n    this.chart.changeSize(element.offsetWidth - 10, element.offsetHeight - 10)\r\n  }\r\n\r\n  parseData(data) {\r\n    const values = data.map(country => {\r\n      const historyKeys = Object.keys(country.confirmed.history).filter(date => country.confirmed.history[date] > 0);\r\n      historyKeys.sort(function (a, b) {\r\n        a = new Date(a);\r\n        b = new Date(b);\r\n        return a.getTime() - b.getTime();\r\n      });\r\n      const firstDay = new Date(historyKeys[0]);\r\n      return historyKeys.map((date, index) => (\r\n        index === 0 ?\r\n          {\r\n            country: country.name,\r\n            time: 0,\r\n            cases: country.confirmed.history[date]\r\n          } :\r\n          {\r\n            country: country.name,\r\n            time: this.daysBetweenDates(firstDay, new Date(date)),\r\n            cases: country.confirmed.history[date]\r\n          }\r\n      ));\r\n    });\r\n    return [].concat.apply([], values);\r\n  }\r\n\r\n  parseDate(date) {\r\n    return `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const data = this.parseData(this.props.data);\r\n    this.chart.changeData(data);\r\n\r\n    this.chart\r\n      .line()\r\n      .position('time*cases')\r\n      .color('country')\r\n      .shape('smooth');\r\n\r\n    this.chart\r\n      .point()\r\n      .position('time*cases')\r\n      .color('country')\r\n      .shape('circle');\r\n\r\n    this.chart.tooltip({ showTitle: false })\r\n\r\n    this.updateChartSize();\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('resize', this.updateChartSize)\r\n    const element = document.getElementById('containerEvolution')\r\n    this.chart = new Chart({\r\n      container: element,\r\n      height: element.offsetHeight - 10,\r\n      padding: 50,\r\n      renderer: 'svg'\r\n    });\r\n    this.chart.tooltip({ showTitle: false })\r\n    this.chart.data(this.parseData(this.props.data));\r\n    this.chart.scale({\r\n      time: {\r\n       sync: true,\r\n       min: 0\r\n      },\r\n      cases: {\r\n        nice: true,\r\n      },\r\n    });\r\n\r\n    this.chart.tooltip({\r\n      showCrosshairs: true,\r\n      shared: true,\r\n    });\r\n\r\n    this.chart\r\n      .line()\r\n      .position('time*cases')\r\n      .color('country')\r\n      .shape('smooth');\r\n\r\n    this.chart\r\n      .point()\r\n      .position('time*cases')\r\n      .color('country')\r\n      .shape('circle');\r\n\r\n    this.chart.render();\r\n    this.updateChartSize();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"containerEvolution\" className=\"container\" />\r\n    );\r\n  }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { HistoryChart } from '../Charts/History';\r\nimport { EvolutionChart } from '../Charts/Evolution';\r\nimport { Layout, Row, Col, Statistic, Card } from 'antd';\r\n\r\nconst { Content } = Layout;\r\n\r\nexport class AppContent extends Component {\r\n  render() {\r\n    return (\r\n      <Content>\r\n        <div className=\"mainContent\">\r\n          <div className=\"statsContainer\">\r\n            <Card title=\"Global Stats\">\r\n              <Row style={{margin: 0}}>\r\n                <Col span={8}>\r\n                  <Statistic title=\"Confirmed\" value={this.props.totalData.confirmed} />\r\n                </Col>\r\n                <Col span={8}>\r\n                  <Statistic title=\"Deaths\" value={this.props.totalData.deaths} />\r\n                </Col>\r\n                <Col span={8}>\r\n                  <Statistic title=\"Recovered\" value={this.props.totalData.recovered} />\r\n                </Col>\r\n              </Row>\r\n            </Card>\r\n          </div>\r\n          <div className=\"chartsContainer\">\r\n            <Card>\r\n              <HistoryChart data={this.props.selectedData} />\r\n            </Card>\r\n            <Card>\r\n              <EvolutionChart data={this.props.selectedData} />\r\n            </Card>\r\n          </div>\r\n        </div>\r\n      </Content>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\nimport covidDataApi from 'jhucsse.covid';\nimport { AppFooter } from './Footer'\nimport { Layout, Spin } from 'antd';\nimport './App.css';\nimport { AppHeader } from './Header';\nimport { AppContent } from './Content/Content';\n\nclass App extends Component {\n  state = { data: {}, selectedData: [], totalData: {}, loaded: false }\n\n  onCountriesSelected = (selectedCountries) => {\n    this.setState({\n      selectedData: selectedCountries.map(country => this.state.data[country])\n    });\n  }\n\n  getTotalData(covidData) {\n    return {\n      confirmed: covidData.confirmed.latest,\n      deaths: covidData.deaths.latest,\n      recovered: covidData.recovered.latest\n    }\n  }\n\n  parseData(covidData) {\n    const countries = {};\n    function mergeHistory(history1, history2) {\n      Object.keys(history2).forEach(key => history1[key] = (history1[key] || 0) + history2[key])\n      return history1;\n    }\n\n    function parseData(data, type) {\n      data.locations.forEach(location => {\n        if (!countries[location.country]) {\n          countries[location.country] = {\n            name: location.country,\n            coordinates: location.coordinates,\n            confirmed: { provinces: {}, cases: 0, history: {} },\n            deaths: { provinces: {}, cases: 0, history: {} },\n            recovered: { provinces: {}, cases: 0, history: {} }\n          }\n        }\n\n        const typeMap = countries[location.country][type];\n\n        typeMap.cases += location.latest;\n        typeMap.history = mergeHistory(typeMap.history, location.history);\n\n        if (location.province !== \"\") {\n          typeMap.provinces[location.province] = {\n            name: location.province,\n            cases: location.latest,\n            history: location.history\n          }\n        }\n      });\n    }\n\n    parseData(covidData.confirmed, 'confirmed');\n    parseData(covidData.deaths, 'deaths');\n    parseData(covidData.recovered, 'recovered');\n    return countries;\n  }\n\n  componentDidMount() {\n    covidDataApi.all()\n      .then(covidData => {\n        this.setState({ \n          data: this.parseData(covidData),\n          totalData: this.getTotalData(covidData),\n          loaded: true\n        });\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {\n          !this.state.loaded ?\n            <Spin className=\"spinner-container\" /> :\n            <Layout className=\"App\">\n              <AppHeader />\n              <AppContent selectedData={this.state.selectedData} totalData={this.state.totalData} />\n              <AppFooter countries={Object.values(this.state.data)} onChange={this.onCountriesSelected} />\n            </Layout>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}