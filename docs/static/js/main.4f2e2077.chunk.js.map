{"version":3,"sources":["Assets/Covid-19-Charts.png","Header.js","Charts/History.js","Charts/Evolution.js","Charts/BarCases.js","Charts/LogEvolution.js","DataManager.js","Content/ChartsContent.js","Content/StatsContent.js","Footer.js","Content/Content.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","Layout","AppHeader","Modal","info","title","content","href","target","onOk","className","src","covidLogo","alt","type","shape","onClick","this","InfoOutlined","Component","HistoryChart","updateChartSize","element","document","getElementById","chart","changeSize","offsetWidth","offsetHeight","window","removeEventListener","data","values","map","country","Object","keys","confirmed","history","date","name","Date","cases","concat","apply","getMonth","getDate","getFullYear","parseData","props","changeData","line","position","color","tooltip","showTitle","highestNumberOfCases","forEach","d","scale","alias","max","render","addEventListener","Chart","container","height","renderer","range","nice","showCrosshairs","shared","axis","label","formatter","val","Number","parseDate","offset","style","fill","id","EvolutionChart","date1","date2","getTime","historyKeys","filter","sort","a","b","firstDay","index","time","daysBetweenDates","sync","min","BarCasesChart","deaths","recovered","dv","DataSet","createView","source","transform","fields","key","value","retains","rows","interval","adjust","showMarkers","interaction","coordinate","transpose","LogEvolutionChart","Math","log","dataManager","listeners","callback","push","length","covidDataApi","all","covidData","byCountry","parseDataByCountry","total","getTotalData","countries","locations","location","coordinates","provinces","history1","history2","typeMap","latest","province","updated","last_updated","Option","Select","ChartsContent","updateCharts","countryNames","nameA","toUpperCase","nameB","setState","selectedCountries","onCountriesSelected","state","addListener","mode","flex","placeholder","defaultValue","onChange","size","StatsContent","updateStats","countriesData","tableColumns","dataIndex","sorter","slice","getHours","getMinutes","dataSource","columns","pagination","getTop6","Footer","AppFooter","Content","AppContent","setLoaded","loaded","top","App","pullData","Boolean","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+GAAAA,EAAOC,QAAU,IAA0B,6C,6QCKnCC,EAAWC,IAAXD,OAEKE,EAAb,+KAEIC,IAAMC,KAAK,CACTC,MAAO,OACPC,QACE,6BACE,4FACA,6DAAkC,uBAAGC,KAAK,6CAA6CC,OAAO,SAA5D,oEAGtCC,KARS,iBAFf,+BAeI,OACE,kBAACT,EAAD,CAAQU,UAAU,UAChB,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,eAAeC,IAAKC,IAAWC,IAAI,gBAEpD,kBAAC,IAAD,CAAQC,KAAK,UAAUC,MAAM,SAASC,QAASC,KAAKb,MAClD,kBAACc,EAAA,EAAD,aAtBZ,GAA+BC,a,iBCJlBC,EAAb,2MAKEC,gBAAkB,WAChB,IAAMC,EAAUC,SAASC,eAAe,oBACxC,EAAKC,MAAMC,WAAWJ,EAAQK,YAAc,GAAIL,EAAQM,cAAgB,IAAMN,EAAQM,aAAe,GAAK,MAP9G,sFAEIC,OAAOC,oBAAoB,SAAUb,KAAKI,mBAF9C,gCAUYU,GACR,IAAMC,EAASD,EAAKE,KAAI,SAAAC,GACtB,OAAOC,OAAOC,KAAKF,EAAQG,UAAUC,SAASL,KAAI,SAAAM,GAAI,MACpD,CAAEL,QAASA,EAAQM,KAAMD,KAAM,IAAIE,KAAKF,GAAOG,MAAOR,EAAQG,UAAUC,QAAQC,UAGpF,MAAO,GAAGI,OAAOC,MAAM,GAAIZ,KAhB/B,gCAmBYO,GACR,MAAM,GAAN,OAAUA,EAAKM,WAAa,EAA5B,YAAiCN,EAAKO,UAAtC,YAAmDP,EAAKQ,iBApB5D,2CAwBI,IAAMhB,EAAOd,KAAK+B,UAAU/B,KAAKgC,MAAMlB,MACvCd,KAAKQ,MAAMyB,WAAWnB,GAEtBd,KAAKQ,MACF0B,OACAC,SAAS,cACTC,MAAM,WACNtC,MAAM,UAETE,KAAKQ,MAAM6B,QAAQ,CAAEC,WAAW,IAEhC,IAAIC,EAAuB,EAE3BzB,EAAK0B,SAAQ,SAAAC,GACXF,EAAuBE,EAAEhB,MAAQc,EAAuBE,EAAEhB,MAAQc,KAGpEvC,KAAKQ,MAAMkC,MAAM,QAAS,CACxBC,MAAO,kBACPC,IAAKL,EAAuB,GAAMA,IAGpCvC,KAAKQ,MAAMqC,SAEX7C,KAAKI,oBAhDT,0CAmDuB,IAAD,OAClBQ,OAAOkC,iBAAiB,SAAU9C,KAAKI,iBACvC,IAAMC,EAAUC,SAASC,eAAe,oBACxCP,KAAKQ,MAAQ,IAAIuC,QAAM,CACrBC,UAAW3C,EACX4C,OAAQ5C,EAAQM,cAAgB,IAAMN,EAAQM,aAAe,GAAK,IAClEuC,SAAU,QAEZlD,KAAKQ,MAAM6B,QAAQ,CAAEC,WAAW,IAChCtC,KAAKQ,MAAMM,KAAKd,KAAK+B,UAAU/B,KAAKgC,MAAMlB,OAC1Cd,KAAKQ,MAAMkC,MAAM,CACfpB,KAAM,CACJ6B,MAAO,CAAC,EAAG,IAEb1B,MAAO,CACL2B,MAAM,KAIVpD,KAAKQ,MAAM6B,QAAQ,CACjBgB,gBAAgB,EAChBC,QAAQ,IAGVtD,KAAKQ,MAAMkC,MAAM,OAAQ,CACvBC,MAAO,sBAGT3C,KAAKQ,MAAM+C,KAAK,OAAQ,CACtBC,MAAO,CACLC,UAAW,SAACC,GACV,IAAMpC,EAAO,IAAIE,KAAKmC,OAAOD,IAC7B,OAAO,EAAKE,UAAUtC,KAG1BlC,MAAO,CACLyE,OAAQ,GACRC,MAAO,CACLC,KAAM,WAKZ/D,KAAKQ,MAAMkC,MAAM,QAAS,CACxBC,MAAO,oBAGT3C,KAAKQ,MAAM+C,KAAK,QAAS,CACvBnE,MAAO,CACLyE,OAAQ,GACRC,MAAO,CACLC,KAAM,WAKZ/D,KAAKQ,MAAMqC,SACX7C,KAAKI,oBA5GT,+BAgHI,OACE,yBAAK4D,GAAG,mBAAmBvE,UAAU,kBAjH3C,GAAkCS,aCArB+D,EAAb,2MAUE7D,gBAAkB,WAChB,IAAMC,EAAUC,SAASC,eAAe,sBACxC,EAAKC,MAAMC,WAAWJ,EAAQK,YAAc,GAAIL,EAAQM,cAAgB,IAAMN,EAAQM,aAAe,GAAK,MAZ9G,sFAEIC,OAAOC,oBAAoB,SAAUb,KAAKI,mBAF9C,uCAKmB8D,EAAOC,GAEtB,OADoBA,EAAMC,UAAYF,EAAME,WAC1B,QAPtB,gCAeYtD,GAAO,IAAD,OACRC,EAASD,EAAKE,KAAI,SAAAC,GACtB,IAAMoD,EAAcnD,OAAOC,KAAKF,EAAQG,UAAUC,SAASiD,QAAO,SAAAhD,GAAI,OAAIL,EAAQG,UAAUC,QAAQC,GAAQ,KAC5G+C,EAAYE,MAAK,SAAUC,EAAGC,GAG5B,OAFAD,EAAI,IAAIhD,KAAKgD,GACbC,EAAI,IAAIjD,KAAKiD,GACND,EAAEJ,UAAYK,EAAEL,aAEzB,IAAMM,EAAW,IAAIlD,KAAK6C,EAAY,IACtC,OAAOA,EAAYrD,KAAI,SAACM,EAAMqD,GAAP,OACX,IAAVA,EACE,CACE1D,QAASA,EAAQM,KACjBqD,KAAM,EACNnD,MAAOR,EAAQG,UAAUC,QAAQC,IAEnC,CACEL,QAASA,EAAQM,KACjBqD,KAAM,EAAKC,iBAAiBH,EAAU,IAAIlD,KAAKF,IAC/CG,MAAOR,EAAQG,UAAUC,QAAQC,UAIzC,MAAO,GAAGI,OAAOC,MAAM,GAAIZ,KAtC/B,2CA0CI,IAAMD,EAAOd,KAAK+B,UAAU/B,KAAKgC,MAAMlB,MACvCd,KAAKQ,MAAMyB,WAAWnB,GAEtBd,KAAKQ,MACF0B,OACAC,SAAS,cACTC,MAAM,WACNtC,MAAM,UAGTE,KAAKQ,MAAM6B,QAAQ,CAAEC,WAAW,IAEhC,IAAIC,EAAuB,EAE3BzB,EAAK0B,SAAQ,SAAAC,GACXF,EAAuBE,EAAEhB,MAAQc,EAAuBE,EAAEhB,MAAQc,KAGpEvC,KAAKQ,MAAMkC,MAAM,QAAS,CACxBC,MAAO,kBACPC,IAAKL,EAAuB,GAAMA,IAGpCvC,KAAKQ,MAAMqC,SAEX7C,KAAKI,oBAnET,0CAuEIQ,OAAOkC,iBAAiB,SAAU9C,KAAKI,iBACvC,IAAMC,EAAUC,SAASC,eAAe,sBACxCP,KAAKQ,MAAQ,IAAIuC,QAAM,CACrBC,UAAW3C,EACX4C,OAAQ5C,EAAQM,cAAgB,IAAMN,EAAQM,aAAe,GAAK,IAClEuC,SAAU,QAEZlD,KAAKQ,MAAM6B,QAAQ,CAAEC,WAAW,IAChCtC,KAAKQ,MAAMM,KAAKd,KAAK+B,UAAU/B,KAAKgC,MAAMlB,OAC1Cd,KAAKQ,MAAMkC,MAAM,CACfkC,KAAM,CACJE,MAAM,EACNC,IAAK,GAEPtD,MAAO,CACL2B,MAAM,KAIVpD,KAAKQ,MAAM6B,QAAQ,CACjBgB,gBAAgB,EAChBC,QAAQ,IAGVtD,KAAKQ,MAAMkC,MAAM,OAAQ,CACvBC,MAAO,8BAGT3C,KAAKQ,MAAM+C,KAAK,OAAQ,CACtBnE,MAAO,CACLyE,OAAQ,GACRC,MAAO,CACLC,KAAM,WAKZ/D,KAAKQ,MAAMkC,MAAM,QAAS,CACxBC,MAAO,oBAGT3C,KAAKQ,MAAM+C,KAAK,QAAS,CACvBnE,MAAO,CACLyE,OAAQ,GACRC,MAAO,CACLC,KAAM,WAKZ/D,KAAKQ,MAAMqC,SACX7C,KAAKI,oBA1HT,+BA8HI,OACE,yBAAK4D,GAAG,qBAAqBvE,UAAU,kBA/H7C,GAAoCS,a,mCCCvB8E,EAAb,2MAUE5E,gBAAkB,WAChB,IAAMC,EAAUC,SAASC,eAAe,qBACxC,EAAKC,MAAMC,WAAWJ,EAAQK,YAAc,GAAIL,EAAQM,cAAgB,IAAMN,EAAQM,aAAe,GAAK,MAZ9G,sFAEIC,OAAOC,oBAAoB,SAAUb,KAAKI,mBAF9C,uCAKmB8D,EAAOC,GAEtB,OADoBA,EAAMC,UAAYF,EAAME,WAC1B,QAPtB,gCAeYtD,GACR,OAAOA,EAAKE,KAAI,SAAAC,GAAO,MAAK,CAC1BM,KAAMN,EAAQM,KACdH,UAAWH,EAAQG,UAAUK,MAC7BwD,OAAQhE,EAAQgE,OAAOxD,MACvByD,UAAWjE,EAAQiE,UAAUzD,YApBnC,2CAyBI,IAAMX,EAAOd,KAAK+B,UAAU/B,KAAKgC,MAAMlB,MAEjCqE,GADK,IAAIC,KACDC,aAAaC,OAAOxE,GAElCqE,EAAGI,UAAU,CACX1F,KAAM,OACN2F,OAAQ,CAAC,YAAa,SAAU,aAChCC,IAAK,UACLC,MAAO,QACPC,QAAS,CAAC,UAGZ3F,KAAKQ,MAAMyB,WAAWkD,EAAGS,MAEzB5F,KAAKQ,MACFqF,WACAC,OAAO,SACP3D,SAAS,cACTC,MAAM,WAETpC,KAAKQ,MAAM6B,QAAQ,CACjBiB,QAAQ,EACRyC,aAAa,IAGf/F,KAAKQ,MAAMwF,YAAY,iBACvBhG,KAAKQ,MAAMqC,SAEX7C,KAAKI,oBArDT,0CAyDIQ,OAAOkC,iBAAiB,SAAU9C,KAAKI,iBACvC,IAAMC,EAAUC,SAASC,eAAe,qBAGlC4E,GADK,IAAIC,KACDC,aAAaC,OAAOtF,KAAK+B,UAAU/B,KAAKgC,MAAMlB,OAC5DqE,EAAGI,UAAU,CACX1F,KAAM,OACN2F,OAAQ,CAAC,YAAa,SAAU,aAChCC,IAAK,UACLC,MAAO,QACPC,QAAS,CAAC,UAIZ3F,KAAKQ,MAAQ,IAAIuC,QAAM,CACrBC,UAAW3C,EACX4C,OAAQ5C,EAAQM,cAAgB,IAAMN,EAAQM,aAAe,GAAK,IAClEuC,SAAU,QAGZlD,KAAKQ,MAAMyF,aAAaC,YAExBlG,KAAKQ,MAAMM,KAAKqE,EAAGS,MACnB5F,KAAKQ,MAAMkC,MAAM,QAAS,CACxBU,MAAM,IAGRpD,KAAKQ,MAAM+C,KAAK,OAAQ,CACtBC,MAAO,CACLK,OAAQ,MAIZ7D,KAAKQ,MAAM6B,QAAQ,CACjBiB,QAAQ,EACRyC,aAAa,IAIf/F,KAAKQ,MAAMqC,SAEX7C,KAAKI,oBAlGT,+BAsGI,OACE,yBAAK4D,GAAG,oBAAoBvE,UAAU,kBAvG5C,GAAmCS,aCDtBiG,EAAb,2MAUE/F,gBAAkB,WAChB,IAAMC,EAAUC,SAASC,eAAe,yBACxC,EAAKC,MAAMC,WAAWJ,EAAQK,YAAc,GAAIL,EAAQM,cAAgB,IAAMN,EAAQM,aAAe,GAAK,MAZ9G,sFAEIC,OAAOC,oBAAoB,SAAUb,KAAKI,mBAF9C,uCAKmB8D,EAAOC,GAEtB,OADoBA,EAAMC,UAAYF,EAAME,WAC1B,QAPtB,gCAeYtD,GAAO,IAAD,OACRC,EAASD,EAAKE,KAAI,SAAAC,GACtB,IAAMoD,EAAcnD,OAAOC,KAAKF,EAAQG,UAAUC,SAASiD,QAAO,SAAAhD,GAAI,OAAIL,EAAQG,UAAUC,QAAQC,GAAQ,KAC5G+C,EAAYE,MAAK,SAAUC,EAAGC,GAG5B,OAFAD,EAAI,IAAIhD,KAAKgD,GACbC,EAAI,IAAIjD,KAAKiD,GACND,EAAEJ,UAAYK,EAAEL,aAEzB,IAAMM,EAAW,IAAIlD,KAAK6C,EAAY,IACtC,OAAOA,EAAYrD,KAAI,SAACM,EAAMqD,GAAP,OACX,IAAVA,EACE,CACE1D,QAASA,EAAQM,KACjBqD,KAAM,EACNnD,MAAO2E,KAAKC,IAAIpF,EAAQG,UAAUC,QAAQC,KAE5C,CACEL,QAASA,EAAQM,KACjBqD,KAAM,EAAKC,iBAAiBH,EAAU,IAAIlD,KAAKF,IAC/CG,MAAO2E,KAAKC,IAAIpF,EAAQG,UAAUC,QAAQC,WAIlD,MAAO,GAAGI,OAAOC,MAAM,GAAIZ,KAtC/B,2CA0CI,IAAMD,EAAOd,KAAK+B,UAAU/B,KAAKgC,MAAMlB,MACvCd,KAAKQ,MAAMyB,WAAWnB,GAEtBd,KAAKQ,MACF0B,OACAC,SAAS,cACTC,MAAM,WACNtC,MAAM,UAETE,KAAKQ,MAAM6B,QAAQ,CAAEC,WAAW,IAEhC,IAAIC,EAAuB,EAE3BzB,EAAK0B,SAAQ,SAAAC,GACXF,EAAuBE,EAAEhB,MAAQc,EAAuBE,EAAEhB,MAAQc,KAGpEvC,KAAKQ,MAAMkC,MAAM,QAAS,CACxBC,MAAO,kBACPC,IAAKL,EAAuB,GAAMA,IAGpCvC,KAAKQ,MAAMqC,SAEX7C,KAAKI,oBAlET,0CAsEIQ,OAAOkC,iBAAiB,SAAU9C,KAAKI,iBACvC,IAAMC,EAAUC,SAASC,eAAe,yBACxCP,KAAKQ,MAAQ,IAAIuC,QAAM,CACrBC,UAAW3C,EACX4C,OAAQ5C,EAAQM,cAAgB,IAAMN,EAAQM,aAAe,GAAK,IAClEuC,SAAU,QAEZlD,KAAKQ,MAAM6B,QAAQ,CAAEC,WAAW,IAChC,IAAMxB,EAAOd,KAAK+B,UAAU/B,KAAKgC,MAAMlB,MACvCd,KAAKQ,MAAMM,KAAKA,GAChBd,KAAKQ,MAAMkC,MAAM,CACfkC,KAAM,CACJE,MAAM,EACNC,IAAK,GAEPtD,MAAO,CACL2B,MAAM,KAIVpD,KAAKQ,MAAM6B,QAAQ,CACjBgB,gBAAgB,EAChBC,QAAQ,IAGVtD,KAAKQ,MAAMkC,MAAM,OAAQ,CACvBC,MAAO,8BAGT3C,KAAKQ,MAAM+C,KAAK,OAAQ,CACtBnE,MAAO,CACLyE,OAAQ,GACRC,MAAO,CACLC,KAAM,WAKZ/D,KAAKQ,MAAMkC,MAAM,QAAS,CACxBC,MAAO,oBAGT3C,KAAKQ,MAAM+C,KAAK,QAAS,CACvBnE,MAAO,CACLyE,OAAQ,GACRC,MAAO,CACLC,KAAM,WAKZ/D,KAAKI,oBAzHT,+BA6HI,OACE,yBAAK4D,GAAG,wBAAwBvE,UAAU,kBA9HhD,GAAuCS,a,4CCqE1BoG,EAAc,I,WArEzB,aAAe,oBACbtG,KAAKc,KAAO,GAEZd,KAAKuG,UAAY,G,wDAGPC,GACVxG,KAAKuG,UAAUE,KAAKD,GAChBtF,OAAOH,OAAOf,KAAKc,MAAM4F,OAAS,GACpCF,EAASxG,KAAKc,Q,wKAKQ6F,IAAaC,M,OAA/BC,E,OACN7G,KAAKc,KAAKgG,UAAY9G,KAAK+G,mBAAmBF,GAC9C7G,KAAKc,KAAKkG,MAAQhH,KAAKiH,aAAaJ,GACpC7G,KAAKuG,UAAU/D,SAAQ,SAAAgE,GAAQ,OAAIA,EAAS,EAAK1F,S,+IAGhC+F,GACjB,IAAMK,EAAY,GAMlB,SAASnF,EAAUjB,EAAMjB,GACvBiB,EAAKqG,UAAU3E,SAAQ,SAAA4E,GAChBF,EAAUE,EAASnG,WACtBiG,EAAUE,EAASnG,SAAW,CAC5BM,KAAM6F,EAASnG,QACfoG,YAAaD,EAASC,YACtBjG,UAAW,CAAEkG,UAAW,GAAI7F,MAAO,EAAGJ,QAAS,IAC/C4D,OAAQ,CAAEqC,UAAW,GAAI7F,MAAO,EAAGJ,QAAS,IAC5C6D,UAAW,CAAEoC,UAAW,GAAI7F,MAAO,EAAGJ,QAAS,MAInD,IAjBkBkG,EAAUC,EAiBtBC,EAAUP,EAAUE,EAASnG,SAASpB,GAE5C4H,EAAQhG,OAAS2F,EAASM,OAC1BD,EAAQpG,SApBUkG,EAoBaE,EAAQpG,QApBXmG,EAoBoBJ,EAAS/F,QAnB3DH,OAAOC,KAAKqG,GAAUhF,SAAQ,SAAAiD,GAAG,OAAI8B,EAAS9B,IAAQ8B,EAAS9B,IAAQ,GAAK+B,EAAS/B,MAC9E8B,GAoBqB,KAAtBH,EAASO,WACXF,EAAQH,UAAUF,EAASO,UAAY,CACrCpG,KAAM6F,EAASO,SACflG,MAAO2F,EAASM,OAChBrG,QAAS+F,EAAS/F,aAS1B,OAHAU,EAAU8E,EAAUzF,UAAW,aAC/BW,EAAU8E,EAAU5B,OAAQ,UAC5BlD,EAAU8E,EAAU3B,UAAW,aACxBgC,I,mCAGIL,GACX,MAAO,CACLzF,UAAW,CAAEK,MAAOoF,EAAUzF,UAAUsG,OAAQE,QAASf,EAAUzF,UAAUyG,cAC7E5C,OAAQ,CAAExD,MAAOoF,EAAU5B,OAAOyC,OAAQE,QAASf,EAAU5B,OAAO4C,cACpE3C,UAAW,CAAEzD,MAAOoF,EAAU3B,UAAUwC,OAAQE,QAASf,EAAU3B,UAAU2C,mB,MC3D3EC,EAAWC,IAAXD,OAEKE,EAAb,YACE,WAAYhG,GAAQ,IAAD,8BACjB,4CAAMA,KAaRiG,aAAe,SAACnH,GACd,IAAMoH,EAAehH,OAAOH,OAAOD,EAAKgG,WACxCoB,EAAa3D,MAAK,SAAUC,EAAGC,GAC7B,IAAI0D,EAAQ3D,EAAEjD,KAAK6G,cACfC,EAAQ5D,EAAElD,KAAK6G,cACnB,OAAID,EAAQE,GACF,EAENF,EAAQE,EACH,EAIF,KAET,EAAKC,SAAS,CAAEJ,eAAcpH,KAAMA,EAAKgG,UAAWyB,kBAAmB,CAAC,QAAS,YA7BhE,EAgCnBC,oBAAsB,SAACD,GACrB,EAAKD,SAAS,CACZC,uBA/BF,EAAKE,MAAQ,CACX3H,KAAM,GACNoH,aAAc,GACdK,kBAAmB,IANJ,EADrB,iFAYIjC,EAAYoC,YAAY1I,KAAKiI,gBAZjC,+BAuCY,IAAD,OACP,OACE,yBAAKxI,UAAU,iBACb,yBAAKA,UAAU,qBACb,6EACA,kBAAC,IAAD,CACEkJ,KAAK,WACL7E,MAAO,CAAE8E,KAAM,GACfC,YAAY,YACZC,aAAc,CAAC,QAAS,SACxBC,SAAU/I,KAAKwI,qBAGbxI,KAAKyI,MAAMP,aAAalH,KAAI,SAAAC,GAAO,OAAI,kBAAC6G,EAAD,CAAQrC,IAAKxE,EAAQM,MAAON,EAAQM,WAIjF,yBAAK9B,UAAU,mBACb,kBAAC,IAAD,CAAML,MAAM,UAAU4J,KAAK,SACzB,kBAAC,EAAD,CAAclI,KAAMd,KAAKyI,MAAMF,kBAAkBvH,KAAI,SAAAC,GAAO,OAAI,EAAKwH,MAAM3H,KAAKG,SAElF,kBAAC,IAAD,CAAM7B,MAAM,YAAY4J,KAAK,SAC3B,kBAAC,EAAD,CAAgBlI,KAAMd,KAAKyI,MAAMF,kBAAkBvH,KAAI,SAAAC,GAAO,OAAI,EAAKwH,MAAM3H,KAAKG,SAEpF,kBAAC,IAAD,CAAM7B,MAAM,YAAY4J,KAAK,SAC3B,kBAAC,EAAD,CAAelI,KAAMd,KAAKyI,MAAMF,kBAAkBvH,KAAI,SAAAC,GAAO,OAAI,EAAKwH,MAAM3H,KAAKG,SAEnF,kBAAC,IAAD,CAAM7B,MAAM,wBAAwB4J,KAAK,SACvC,kBAAC,EAAD,CAAmBlI,KAAMd,KAAKyI,MAAMF,kBAAkBvH,KAAI,SAAAC,GAAO,OAAI,EAAKwH,MAAM3H,KAAKG,eAnEjG,GAAmCf,a,kBCNtB+I,EAAb,YACE,WAAYjH,GAAQ,IAAD,8BACjB,4CAAMA,KA4CRkH,YAAc,SAACpI,GACb,IAAMqI,EAAgBjI,OAAOH,OAAOD,EAAKgG,WAAW9F,KAAI,SAAAC,GAAO,MAAK,CAClEM,KAAMN,EAAQM,KACdH,UAAWH,EAAQG,UAAUK,MAC7BwD,OAAQhE,EAAQgE,OAAOxD,MACvByD,UAAWjE,EAAQiE,UAAUzD,UAG/B,EAAK6G,SAAS,CAAExH,KAAM,CAAEgG,UAAWqC,EAAenC,MAAOlG,EAAKkG,UAlD9D,EAAKoC,aAAe,CAClB,CACEhK,MAAO,OACPiK,UAAW,OACX5D,IAAK,QAEP,CACErG,MAAO,kBACPiK,UAAW,YACX5D,IAAK,YACL6D,OAAQ,SAAC9E,EAAGC,GAAJ,OAAUD,EAAEpD,UAAYqD,EAAErD,YAEpC,CACEhC,MAAO,cACPiK,UAAW,SACX5D,IAAK,SACL6D,OAAQ,SAAC9E,EAAGC,GAAJ,OAAUD,EAAES,OAASR,EAAEQ,SAEjC,CACE7F,MAAO,kBACPiK,UAAW,YACX5D,IAAK,YACL6D,OAAQ,SAAC9E,EAAGC,GAAJ,OAAUD,EAAEU,UAAYT,EAAES,aAItC,EAAKuD,MAAQ,CACX3H,KAAM,CACJgG,UAAW,GACXE,MAAO,CACL5F,UAAW,GACX6D,OAAQ,GACRC,UAAW,MAnCA,EADrB,iFA2CIoB,EAAYoC,YAAY1I,KAAKkJ,eA3CjC,8BAyDUpI,GAEN,OADAA,EAAKyD,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAErD,UAAYoD,EAAEpD,aAC7BN,EAAKyI,MAAM,EAAG,KA3DzB,gCA8DYjI,GAER,OADAA,EAAO,IAAIE,KAAKF,GACV,GAAN,OAAUA,EAAKkI,WAAf,YAA6BlI,EAAKmI,aAAlC,aAAmDnI,EAAKM,WAAa,EAArE,YAA0EN,EAAKO,UAA/E,YAA4FP,EAAKQ,iBAhErG,+BAoEI,OACE,yBAAKrC,UAAU,gBACb,kBAAC,IAAD,CAAMuJ,KAAK,QAAQ5J,MAAM,gBACvB,yBAAKK,UAAU,kBACb,kBAAC,IAAD,CAAWL,MAAM,YAAYsG,MAAO1F,KAAKyI,MAAM3H,KAAKkG,MAAM5F,UAAUK,QACpE,kBAAC,IAAD,CAAWrC,MAAM,SAASsG,MAAO1F,KAAKyI,MAAM3H,KAAKkG,MAAM/B,OAAOxD,QAC9D,kBAAC,IAAD,CAAWrC,MAAM,YAAYsG,MAAO1F,KAAKyI,MAAM3H,KAAKkG,MAAM9B,UAAUzD,QACpE,kBAAC,IAAD,CAAWhC,UAAU,aAAaL,MAAM,eAAesG,MAAO1F,KAAK4D,UAAU5D,KAAKyI,MAAM3H,KAAKkG,MAAM5F,UAAUwG,aAGjH,yBAAKnI,UAAU,gBACb,kBAAC,IAAD,CAAMA,UAAU,0BAA0BuJ,KAAK,QAAQ5J,MAAM,oBAC3D,kBAAC,IAAD,CACEK,UAAU,iBACViK,WAAY1J,KAAKyI,MAAM3H,KAAKgG,UAC5B6C,QAAS3J,KAAKoJ,aACdQ,YAAY,EACZZ,KAAK,YAGT,kBAAC,IAAD,CAAMA,KAAK,QAAQ5J,MAAM,uCACvB,yBAAKK,UAAU,gBAEXO,KAAK6J,QAAQ7J,KAAKyI,MAAM3H,KAAKgG,WAAW9F,KAAI,SAAAC,GAAO,OACjD,kBAAC,IAAD,CAAWwE,IAAKxE,EAAQM,KAAMnC,MAAO6B,EAAQM,KAAMmE,MAAOzE,EAAQG,uBA5FpF,GAAkClB,aCD1B4J,EAAW9K,IAAX8K,OAEKC,EAAb,iLAEI,OACE,kBAACD,EAAD,CAAQrK,UAAU,UAAlB,iCAHN,GAA+BS,aCEvB8J,EAAYhL,IAAZgL,QAEKC,EAAb,YACE,WAAYjI,GAAQ,IAAD,8BACjB,4CAAMA,KASRkI,UAAY,WACV,EAAK5B,SAAS,CAAE6B,QAAQ,KARxB,EAAK1B,MAAQ,CACX0B,QAAQ,GAGV7D,EAAYoC,YAAY,EAAKwB,WAPZ,EADrB,sEAgBI,OACE,kBAACF,EAAD,CAASvK,UAAU,iBAEfO,KAAKyI,MAAM0B,OACT,yBAAK1K,UAAU,eACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAMqE,MAAO,CAAC3B,SAAU,WAAYiI,IAAK,cAzBrD,GAAgClK,aCejBmK,E,4LAfX/D,EAAYgE,a,+BAIZ,OACE,yBAAK7K,UAAU,OACb,kBAAC,IAAD,CAAQA,UAAU,OAChB,kBAAC,EAAD,MACA,kBAAC,EAAD,Y,GAVQS,aCKEqK,QACW,cAA7B3J,OAAOwG,SAASoD,UAEe,UAA7B5J,OAAOwG,SAASoD,UAEhB5J,OAAOwG,SAASoD,SAASC,MACvB,2DCZNC,IAAS7H,OAAO,kBAAC,EAAD,MAASvC,SAASC,eAAe,SD6H3C,kBAAmBoK,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4f2e2077.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Covid-19-Charts.807e241c.png\";","import React, { Component } from 'react';\r\nimport { Layout, Modal, Button } from 'antd';\r\nimport { InfoOutlined } from '@ant-design/icons';\r\nimport covidLogo from './Assets/Covid-19-Charts.png';\r\n\r\nconst { Header } = Layout;\r\n\r\nexport class AppHeader extends Component {\r\n  info() {\r\n    Modal.info({\r\n      title: 'Info',\r\n      content: (\r\n        <div>\r\n          <p>Page that aims to help people to analyze data about covid-19.</p>\r\n          <p>All information comes from the <a href=\"https://github.com/CSSEGISandData/COVID-19\" target=\"blank\">  2019 Novel Coronavirus COVID-19 (2019-nCoV) Data Repository.</a></p>\r\n        </div>\r\n      ),\r\n      onOk() { },\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Header className=\"header\">\r\n        <div className=\"headerContainer\">\r\n          <div className=\"logoContainer\">\r\n            <img className=\"header-title\" src={covidLogo} alt=\"Covid Logo\" />\r\n          </div>\r\n          <Button type=\"default\" shape=\"circle\" onClick={this.info}>\r\n            <InfoOutlined />\r\n          </Button>\r\n        </div>\r\n      </Header>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { Chart } from '@antv/g2';\r\n\r\nexport class HistoryChart extends Component {\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.updateChartSize)\r\n  }\r\n\r\n  updateChartSize = () => {\r\n    const element = document.getElementById('containerHistory')\r\n    this.chart.changeSize(element.offsetWidth - 10, element.offsetHeight >= 400 ? element.offsetHeight - 10 : 400)\r\n  }\r\n\r\n  parseData(data) {\r\n    const values = data.map(country => {\r\n      return Object.keys(country.confirmed.history).map(date => (\r\n        { country: country.name, date: new Date(date), cases: country.confirmed.history[date] }\r\n      ));\r\n    });\r\n    return [].concat.apply([], values);\r\n  }\r\n\r\n  parseDate(date) {\r\n    return `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const data = this.parseData(this.props.data);\r\n    this.chart.changeData(data);\r\n\r\n    this.chart\r\n      .line()\r\n      .position('date*cases')\r\n      .color('country')\r\n      .shape('smooth');\r\n\r\n    this.chart.tooltip({ showTitle: false });\r\n\r\n    let highestNumberOfCases = 0;\r\n\r\n    data.forEach(d => {\r\n      highestNumberOfCases = d.cases > highestNumberOfCases ? d.cases : highestNumberOfCases;\r\n    });\r\n\r\n    this.chart.scale('cases', {\r\n      alias: 'Number of cases',\r\n      max: highestNumberOfCases + 0.2 * highestNumberOfCases\r\n    });\r\n\r\n    this.chart.render();\r\n\r\n    this.updateChartSize();\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('resize', this.updateChartSize)\r\n    const element = document.getElementById('containerHistory')\r\n    this.chart = new Chart({\r\n      container: element,\r\n      height: element.offsetHeight >= 400 ? element.offsetHeight - 10 : 400,\r\n      renderer: 'svg'\r\n    });\r\n    this.chart.tooltip({ showTitle: false })\r\n    this.chart.data(this.parseData(this.props.data));\r\n    this.chart.scale({\r\n      date: {\r\n        range: [0, 1],\r\n      },\r\n      cases: {\r\n        nice: true,\r\n      },\r\n    });\r\n\r\n    this.chart.tooltip({\r\n      showCrosshairs: true,\r\n      shared: true,\r\n    });\r\n\r\n    this.chart.scale('date', {\r\n      alias: 'Date (mm/dd/yyyy)'\r\n    });\r\n\r\n    this.chart.axis('date', {\r\n      label: {\r\n        formatter: (val) => {\r\n          const date = new Date(Number(val));\r\n          return this.parseDate(date);\r\n        }\r\n      },\r\n      title: {\r\n        offset: 20,\r\n        style: {\r\n          fill: '#aaa'\r\n        }\r\n      }\r\n    });\r\n\r\n    this.chart.scale('cases', {\r\n      alias: 'Number of cases'\r\n    });\r\n\r\n    this.chart.axis('cases', {\r\n      title: {\r\n        offset: 20,\r\n        style: {\r\n          fill: '#aaa'\r\n        }\r\n      }\r\n    });\r\n\r\n    this.chart.render();\r\n    this.updateChartSize();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"containerHistory\" className=\"container\" />\r\n    );\r\n  }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { Chart } from '@antv/g2';\r\n\r\nexport class EvolutionChart extends Component {\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.updateChartSize)\r\n  }\r\n\r\n  daysBetweenDates(date1, date2) {\r\n    const timeBetween = date2.getTime() - date1.getTime();\r\n    return timeBetween / (1000 * 60 * 60 * 24);\r\n  }\r\n\r\n  updateChartSize = () => {\r\n    const element = document.getElementById('containerEvolution')\r\n    this.chart.changeSize(element.offsetWidth - 10, element.offsetHeight >= 400 ? element.offsetHeight - 10 : 400)\r\n  }\r\n\r\n  parseData(data) {\r\n    const values = data.map(country => {\r\n      const historyKeys = Object.keys(country.confirmed.history).filter(date => country.confirmed.history[date] > 0);\r\n      historyKeys.sort(function (a, b) {\r\n        a = new Date(a);\r\n        b = new Date(b);\r\n        return a.getTime() - b.getTime();\r\n      });\r\n      const firstDay = new Date(historyKeys[0]);\r\n      return historyKeys.map((date, index) => (\r\n        index === 0 ?\r\n          {\r\n            country: country.name,\r\n            time: 0,\r\n            cases: country.confirmed.history[date]\r\n          } :\r\n          {\r\n            country: country.name,\r\n            time: this.daysBetweenDates(firstDay, new Date(date)),\r\n            cases: country.confirmed.history[date]\r\n          }\r\n      ));\r\n    });\r\n    return [].concat.apply([], values);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const data = this.parseData(this.props.data);\r\n    this.chart.changeData(data);\r\n\r\n    this.chart\r\n      .line()\r\n      .position('time*cases')\r\n      .color('country')\r\n      .shape('smooth');\r\n\r\n\r\n    this.chart.tooltip({ showTitle: false });\r\n\r\n    let highestNumberOfCases = 0;\r\n\r\n    data.forEach(d => {\r\n      highestNumberOfCases = d.cases > highestNumberOfCases ? d.cases : highestNumberOfCases;\r\n    });\r\n\r\n    this.chart.scale('cases', {\r\n      alias: 'Number of cases',\r\n      max: highestNumberOfCases + 0.2 * highestNumberOfCases\r\n    });\r\n\r\n    this.chart.render();\r\n\r\n    this.updateChartSize();\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('resize', this.updateChartSize)\r\n    const element = document.getElementById('containerEvolution')\r\n    this.chart = new Chart({\r\n      container: element,\r\n      height: element.offsetHeight >= 400 ? element.offsetHeight - 10 : 400,\r\n      renderer: 'svg'\r\n    });\r\n    this.chart.tooltip({ showTitle: false })\r\n    this.chart.data(this.parseData(this.props.data));\r\n    this.chart.scale({\r\n      time: {\r\n        sync: true,\r\n        min: 0\r\n      },\r\n      cases: {\r\n        nice: true,\r\n      },\r\n    });\r\n\r\n    this.chart.tooltip({\r\n      showCrosshairs: true,\r\n      shared: true,\r\n    });\r\n\r\n    this.chart.scale('time', {\r\n      alias: 'Days since the first case'\r\n    });\r\n\r\n    this.chart.axis('time', {\r\n      title: {\r\n        offset: 20,\r\n        style: {\r\n          fill: '#aaa'\r\n        }\r\n      }\r\n    });\r\n\r\n    this.chart.scale('cases', {\r\n      alias: 'Number of cases'\r\n    });\r\n\r\n    this.chart.axis('cases', {\r\n      title: {\r\n        offset: 20,\r\n        style: {\r\n          fill: '#aaa'\r\n        }\r\n      }\r\n    });\r\n\r\n    this.chart.render();\r\n    this.updateChartSize();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"containerEvolution\" className=\"container\" />\r\n    );\r\n  }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { Chart } from '@antv/g2';\r\nimport DataSet from '@antv/data-set';\r\n\r\nexport class BarCasesChart extends Component {\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.updateChartSize)\r\n  }\r\n\r\n  daysBetweenDates(date1, date2) {\r\n    const timeBetween = date2.getTime() - date1.getTime();\r\n    return timeBetween / (1000 * 60 * 60 * 24);\r\n  }\r\n\r\n  updateChartSize = () => {\r\n    const element = document.getElementById('containerBarCases')\r\n    this.chart.changeSize(element.offsetWidth - 10, element.offsetHeight >= 400 ? element.offsetHeight - 10 : 400)\r\n  }\r\n\r\n  parseData(data) {\r\n    return data.map(country => ({\r\n      name: country.name,\r\n      confirmed: country.confirmed.cases,\r\n      deaths: country.deaths.cases,\r\n      recovered: country.recovered.cases\r\n    }));\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const data = this.parseData(this.props.data);\r\n    const ds = new DataSet();\r\n    const dv = ds.createView().source(data);\r\n\r\n    dv.transform({\r\n      type: 'fold',\r\n      fields: ['confirmed', 'deaths', 'recovered'],\r\n      key: 'country',\r\n      value: 'cases',\r\n      retains: ['name']\r\n    });\r\n\r\n    this.chart.changeData(dv.rows);\r\n\r\n    this.chart\r\n      .interval()\r\n      .adjust('stack')\r\n      .position('name*cases')\r\n      .color('country');\r\n\r\n    this.chart.tooltip({\r\n      shared: true,\r\n      showMarkers: false,\r\n    });\r\n\r\n    this.chart.interaction('active-region');\r\n    this.chart.render();\r\n\r\n    this.updateChartSize();\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('resize', this.updateChartSize);\r\n    const element = document.getElementById('containerBarCases');\r\n\r\n    const ds = new DataSet();\r\n    const dv = ds.createView().source(this.parseData(this.props.data));\r\n    dv.transform({\r\n      type: 'fold',\r\n      fields: ['confirmed', 'deaths', 'recovered'],\r\n      key: 'country',\r\n      value: 'cases',\r\n      retains: ['name']\r\n    });\r\n\r\n\r\n    this.chart = new Chart({\r\n      container: element,\r\n      height: element.offsetHeight >= 400 ? element.offsetHeight - 10 : 400,\r\n      renderer: 'svg'\r\n    });\r\n\r\n    this.chart.coordinate().transpose();\r\n\r\n    this.chart.data(dv.rows);\r\n    this.chart.scale('cases', {\r\n      nice: true\r\n    });\r\n\r\n    this.chart.axis('name', {\r\n      label: {\r\n        offset: 12,\r\n      },\r\n    });\r\n\r\n    this.chart.tooltip({\r\n      shared: true,\r\n      showMarkers: false,\r\n    });\r\n\r\n\r\n    this.chart.render();\r\n\r\n    this.updateChartSize();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"containerBarCases\" className=\"container\" />\r\n    );\r\n  }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { Chart } from '@antv/g2';\r\n\r\nexport class LogEvolutionChart extends Component {\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.updateChartSize)\r\n  }\r\n\r\n  daysBetweenDates(date1, date2) {\r\n    const timeBetween = date2.getTime() - date1.getTime();\r\n    return timeBetween / (1000 * 60 * 60 * 24);\r\n  }\r\n\r\n  updateChartSize = () => {\r\n    const element = document.getElementById('containerLogEvolution')\r\n    this.chart.changeSize(element.offsetWidth - 10, element.offsetHeight >= 400 ? element.offsetHeight - 10 : 400)\r\n  }\r\n\r\n  parseData(data) {\r\n    const values = data.map(country => {\r\n      const historyKeys = Object.keys(country.confirmed.history).filter(date => country.confirmed.history[date] > 0);\r\n      historyKeys.sort(function (a, b) {\r\n        a = new Date(a);\r\n        b = new Date(b);\r\n        return a.getTime() - b.getTime();\r\n      });\r\n      const firstDay = new Date(historyKeys[0]);\r\n      return historyKeys.map((date, index) => (\r\n        index === 0 ?\r\n          {\r\n            country: country.name,\r\n            time: 0,\r\n            cases: Math.log(country.confirmed.history[date])\r\n          } :\r\n          {\r\n            country: country.name,\r\n            time: this.daysBetweenDates(firstDay, new Date(date)),\r\n            cases: Math.log(country.confirmed.history[date])\r\n          }\r\n      ));\r\n    });\r\n    return [].concat.apply([], values);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const data = this.parseData(this.props.data);\r\n    this.chart.changeData(data);\r\n\r\n    this.chart\r\n      .line()\r\n      .position('time*cases')\r\n      .color('country')\r\n      .shape('smooth');\r\n\r\n    this.chart.tooltip({ showTitle: false })\r\n\r\n    let highestNumberOfCases = 0;\r\n\r\n    data.forEach(d => {\r\n      highestNumberOfCases = d.cases > highestNumberOfCases ? d.cases : highestNumberOfCases;\r\n    });\r\n\r\n    this.chart.scale('cases', {\r\n      alias: 'Number of cases',\r\n      max: highestNumberOfCases + 0.2 * highestNumberOfCases\r\n    });\r\n\r\n    this.chart.render();\r\n\r\n    this.updateChartSize();\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('resize', this.updateChartSize)\r\n    const element = document.getElementById('containerLogEvolution')\r\n    this.chart = new Chart({\r\n      container: element,\r\n      height: element.offsetHeight >= 400 ? element.offsetHeight - 10 : 400,\r\n      renderer: 'svg'\r\n    });\r\n    this.chart.tooltip({ showTitle: false })\r\n    const data = this.parseData(this.props.data);\r\n    this.chart.data(data);\r\n    this.chart.scale({\r\n      time: {\r\n        sync: true,\r\n        min: 0\r\n      },\r\n      cases: {\r\n        nice: true,\r\n      },\r\n    });\r\n\r\n    this.chart.tooltip({\r\n      showCrosshairs: true,\r\n      shared: true,\r\n    });\r\n\r\n    this.chart.scale('time', {\r\n      alias: 'Days since the first case'\r\n    });\r\n\r\n    this.chart.axis('time', {\r\n      title: {\r\n        offset: 20,\r\n        style: {\r\n          fill: '#aaa'\r\n        }\r\n      }\r\n    });\r\n\r\n    this.chart.scale('cases', {\r\n      alias: 'Number of cases'\r\n    });\r\n\r\n    this.chart.axis('cases', {\r\n      title: {\r\n        offset: 20,\r\n        style: {\r\n          fill: '#aaa'\r\n        }\r\n      }\r\n    });\r\n\r\n    this.updateChartSize();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"containerLogEvolution\" className=\"container\" />\r\n    );\r\n  }\r\n}\r\n\r\n","import covidDataApi from 'jhucsse.covid';\r\n\r\nclass DataManager {\r\n  constructor() {\r\n    this.data = {}\r\n\r\n    this.listeners = [];\r\n  }\r\n\r\n  addListener(callback) {\r\n    this.listeners.push(callback);\r\n    if (Object.values(this.data).length > 0) {\r\n      callback(this.data);\r\n    }\r\n  }\r\n\r\n  async pullData() {\r\n    const covidData = await covidDataApi.all();\r\n    this.data.byCountry = this.parseDataByCountry(covidData);\r\n    this.data.total = this.getTotalData(covidData);\r\n    this.listeners.forEach(callback => callback(this.data));\r\n  }\r\n\r\n  parseDataByCountry(covidData) {\r\n    const countries = {};\r\n    function mergeHistory(history1, history2) {\r\n      Object.keys(history2).forEach(key => history1[key] = (history1[key] || 0) + history2[key])\r\n      return history1;\r\n    }\r\n\r\n    function parseData(data, type) {\r\n      data.locations.forEach(location => {\r\n        if (!countries[location.country]) {\r\n          countries[location.country] = {\r\n            name: location.country,\r\n            coordinates: location.coordinates,\r\n            confirmed: { provinces: {}, cases: 0, history: {} },\r\n            deaths: { provinces: {}, cases: 0, history: {} },\r\n            recovered: { provinces: {}, cases: 0, history: {} }\r\n          }\r\n        }\r\n\r\n        const typeMap = countries[location.country][type];\r\n\r\n        typeMap.cases += location.latest;\r\n        typeMap.history = mergeHistory(typeMap.history, location.history);\r\n\r\n        if (location.province !== \"\") {\r\n          typeMap.provinces[location.province] = {\r\n            name: location.province,\r\n            cases: location.latest,\r\n            history: location.history\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    parseData(covidData.confirmed, 'confirmed');\r\n    parseData(covidData.deaths, 'deaths');\r\n    parseData(covidData.recovered, 'recovered');\r\n    return countries;\r\n  }\r\n\r\n  getTotalData(covidData) {\r\n    return {\r\n      confirmed: { cases: covidData.confirmed.latest, updated: covidData.confirmed.last_updated },\r\n      deaths: { cases: covidData.deaths.latest, updated: covidData.deaths.last_updated },\r\n      recovered: { cases: covidData.recovered.latest, updated: covidData.recovered.last_updated }\r\n    }\r\n  }\r\n}\r\n\r\nexport const dataManager = new DataManager();","import React, { Component } from 'react';\r\nimport { HistoryChart } from '../Charts/History';\r\nimport { EvolutionChart } from '../Charts/Evolution';\r\nimport { Card, Select } from 'antd';\r\nimport { BarCasesChart } from '../Charts/BarCases';\r\nimport { LogEvolutionChart } from '../Charts/LogEvolution';\r\nimport { dataManager } from '../DataManager';\r\n\r\nconst { Option } = Select;\r\n\r\nexport class ChartsContent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      data: {},\r\n      countryNames: [],\r\n      selectedCountries: []\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    dataManager.addListener(this.updateCharts);\r\n  }\r\n\r\n  updateCharts = (data) => {\r\n    const countryNames = Object.values(data.byCountry);\r\n    countryNames.sort(function (a, b) {\r\n      var nameA = a.name.toUpperCase(); // ignore upper and lowercase\r\n      var nameB = b.name.toUpperCase(); // ignore upper and lowercase\r\n      if (nameA < nameB) {\r\n        return -1;\r\n      }\r\n      if (nameA > nameB) {\r\n        return 1;\r\n      }\r\n\r\n      // names must be equal\r\n      return 0;\r\n    });\r\n    this.setState({ countryNames, data: data.byCountry, selectedCountries: ['Spain', 'Italy'] })\r\n  }\r\n\r\n  onCountriesSelected = (selectedCountries) => {\r\n    this.setState({\r\n      selectedCountries\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"chartsContent\">\r\n        <div className=\"countriesSelector\">\r\n          <span>Select the Countries you wish to see data: </span>\r\n          <Select\r\n            mode=\"multiple\"\r\n            style={{ flex: 1 }}\r\n            placeholder=\"Countries\"\r\n            defaultValue={['Spain', 'Italy']}\r\n            onChange={this.onCountriesSelected}\r\n          >\r\n            {\r\n              this.state.countryNames.map(country => <Option key={country.name}>{country.name}</Option>)\r\n            }\r\n          </Select>\r\n        </div>\r\n        <div className=\"chartsContainer\">\r\n          <Card title=\"History\" size=\"small\">\r\n            <HistoryChart data={this.state.selectedCountries.map(country => this.state.data[country])} />\r\n          </Card>\r\n          <Card title=\"Evolution\" size=\"small\">\r\n            <EvolutionChart data={this.state.selectedCountries.map(country => this.state.data[country])} />\r\n          </Card>\r\n          <Card title=\"Cases Bar\" size=\"small\">\r\n            <BarCasesChart data={this.state.selectedCountries.map(country => this.state.data[country])} />\r\n          </Card>\r\n          <Card title=\"Logarithmic Evolution\" size=\"small\">\r\n            <LogEvolutionChart data={this.state.selectedCountries.map(country => this.state.data[country])} />\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { Statistic, Card, Table } from 'antd';\r\nimport { dataManager } from '../DataManager';\r\n\r\nexport class StatsContent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.tableColumns = [\r\n      {\r\n        title: 'Name',\r\n        dataIndex: 'name',\r\n        key: 'name'\r\n      },\r\n      {\r\n        title: 'Confirmed Cases',\r\n        dataIndex: 'confirmed',\r\n        key: 'confirmed',\r\n        sorter: (a, b) => a.confirmed - b.confirmed\r\n      },\r\n      {\r\n        title: 'Death Cases',\r\n        dataIndex: 'deaths',\r\n        key: 'deaths',\r\n        sorter: (a, b) => a.deaths - b.deaths\r\n      },\r\n      {\r\n        title: 'Recovered Cases',\r\n        dataIndex: 'recovered',\r\n        key: 'recovered',\r\n        sorter: (a, b) => a.recovered - b.recovered\r\n      },\r\n    ];\r\n\r\n    this.state = {\r\n      data: {\r\n        byCountry: [],\r\n        total: {\r\n          confirmed: {},\r\n          deaths: {},\r\n          recovered: {}\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    dataManager.addListener(this.updateStats);\r\n  }\r\n\r\n  updateStats = (data) => {\r\n    const countriesData = Object.values(data.byCountry).map(country => ({\r\n      name: country.name,\r\n      confirmed: country.confirmed.cases,\r\n      deaths: country.deaths.cases,\r\n      recovered: country.recovered.cases\r\n    }));\r\n\r\n    this.setState({ data: { byCountry: countriesData, total: data.total } })\r\n  }\r\n\r\n  getTop6(data) {\r\n    data.sort((a, b) => b.confirmed - a.confirmed);\r\n    return data.slice(0, 6);\r\n  }\r\n\r\n  parseDate(date) {\r\n    date = new Date(date);\r\n    return `${date.getHours()}:${date.getMinutes()}, ${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"statsContent\">\r\n        <Card size=\"small\" title=\"Global Stats\">\r\n          <div className=\"statsContainer\">\r\n            <Statistic title=\"Confirmed\" value={this.state.data.total.confirmed.cases} />\r\n            <Statistic title=\"Deaths\" value={this.state.data.total.deaths.cases} />\r\n            <Statistic title=\"Recovered\" value={this.state.data.total.recovered.cases} />\r\n            <Statistic className=\"updateTime\" title=\"Last Updated\" value={this.parseDate(this.state.data.total.confirmed.updated)} />\r\n          </div>\r\n        </Card>\r\n        <div className=\"countriesRow\">\r\n          <Card className=\"countriesTableContainer\" size=\"small\" title=\"Cases by Country\">\r\n            <Table\r\n              className=\"countriesTable\"\r\n              dataSource={this.state.data.byCountry}\r\n              columns={this.tableColumns}\r\n              pagination={false}\r\n              size=\"middle\"\r\n            />\r\n          </Card>\r\n          <Card size=\"small\" title=\"Countries with most Confirmed Cases\" >\r\n            <div className=\"topCountries\">\r\n              {\r\n                this.getTop6(this.state.data.byCountry).map(country =>\r\n                  <Statistic key={country.name} title={country.name} value={country.confirmed} />\r\n                )\r\n              }\r\n            </div>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { Layout } from 'antd';\r\n\r\nconst { Footer } = Layout;\r\n\r\nexport class AppFooter extends Component {\r\n  render() {\r\n    return (\r\n      <Footer className=\"footer\">\r\n        Made By Joao Pedro Pianta\r\n      </Footer>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { Layout, Spin } from 'antd';\r\nimport { ChartsContent } from './ChartsContent';\r\nimport { StatsContent } from './StatsContent';\r\nimport { dataManager } from '../DataManager';\r\nimport { AppFooter } from '../Footer';\r\n\r\nconst { Content } = Layout;\r\n\r\nexport class AppContent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      loaded: false\r\n    }\r\n\r\n    dataManager.addListener(this.setLoaded);\r\n  }\r\n\r\n  setLoaded = () => {\r\n    this.setState({ loaded: true });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Content className=\"mainContainer\">\r\n        {\r\n          this.state.loaded ?\r\n            <div className=\"mainContent\">\r\n              <StatsContent />\r\n              <ChartsContent />\r\n              <AppFooter />\r\n            </div> :\r\n            <Spin style={{position: 'absolute', top: '50%'}} />\r\n        }\r\n      </Content>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\nimport { Layout } from 'antd';\nimport './App.css';\nimport { AppHeader } from './Header';\nimport { AppContent } from './Content/Content';\nimport { dataManager } from './DataManager';\n\nclass App extends Component {\n  componentDidMount() {\n    dataManager.pullData();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Layout className=\"App\">\n          <AppHeader />\n          <AppContent />\n        </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}