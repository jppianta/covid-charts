{"version":3,"sources":["Footer.js","Charts/History.js","globeChart.js","barChart.js","Charts/Evolution.js","App.js","serviceWorker.js","index.js"],"names":["Option","Select","Footer","Layout","AppFooter","mode","style","width","placeholder","defaultValue","onChange","this","props","countries","map","country","key","name","Component","HistoryChart","updateChartSize","element","document","getElementById","chart","changeSize","offsetWidth","offsetHeight","window","removeEventListener","data","values","Object","keys","confirmed","history","date","Date","cases","concat","apply","getMonth","getDate","getFullYear","parseData","console","log","changeData","line","position","color","shape","point","tooltip","showTitle","axis","label","formatter","val","Number","parseDate","addEventListener","Chart","container","autoFit","height","padding","renderer","scale","range","nice","showCrosshairs","shared","render","id","className","EvolutionChart","date1","date2","getTime","historyKeys","filter","sort","a","b","firstDay","index","time","daysBetweenDates","sync","min","Header","Content","App","state","selectedData","onCountriesSelected","selectedCountries","setState","covidData","type","locations","forEach","location","coordinates","provinces","deaths","recovered","history1","history2","typeMap","latest","province","covidDataApi","all","then","Boolean","hostname","match","ReactDOM","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.864c7fda.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Select, Layout } from 'antd';\r\n\r\nconst { Option } = Select;\r\n\r\nconst { Footer } = Layout;\r\n\r\nexport class AppFooter extends Component {\r\n  render() {\r\n    return (\r\n      <Footer>\r\n        <Select\r\n          mode=\"multiple\"\r\n          style={{ width: '100%' }}\r\n          placeholder=\"Please select\"\r\n          defaultValue={[]}\r\n          onChange={this.props.onChange}\r\n        >\r\n          {\r\n            this.props.countries.map(country => <Option key={country.name}>{country.name}</Option>)\r\n          }\r\n        </Select>\r\n      </Footer>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { Chart } from '@antv/g2';\r\n\r\nexport class HistoryChart extends Component {\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.updateChartSize)\r\n  }\r\n\r\n  updateChartSize = () => {\r\n    const element = document.getElementById('containerHistory')\r\n    this.chart.changeSize(element.offsetWidth - 10, element.offsetHeight - 10)\r\n  }\r\n\r\n  parseData(data) {\r\n    const values = data.map(country => {\r\n      return Object.keys(country.confirmed.history).map(date => (\r\n        { country: country.name, date: new Date(date), cases: country.confirmed.history[date] }\r\n      ));\r\n    });\r\n    return [].concat.apply([], values);\r\n  }\r\n\r\n  parseDate(date) {\r\n    return `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const data = this.parseData(this.props.data);\r\n    console.log(data);\r\n    this.chart.changeData(data);\r\n\r\n    this.chart\r\n      .line()\r\n      .position('date*cases')\r\n      .color('country')\r\n      .shape('smooth');\r\n\r\n    this.chart\r\n      .point()\r\n      .position('date*cases')\r\n      .color('country')\r\n      .shape('circle');\r\n\r\n    this.chart.tooltip({ showTitle: false })\r\n\r\n    this.chart.axis('date', {\r\n      label: {\r\n        formatter: (val) => {\r\n          const date = new Date(Number(val));\r\n          return this.parseDate(date);\r\n        }\r\n      }\r\n    })\r\n\r\n    this.updateChartSize();\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('resize', this.updateChartSize)\r\n    const element = document.getElementById('containerHistory')\r\n    this.chart = new Chart({\r\n      container: element,\r\n      autoFit: true,\r\n      height: element.offsetHeight - 10,\r\n      padding: 50,\r\n      renderer: 'svg'\r\n    });\r\n    this.chart.tooltip({ showTitle: false })\r\n    this.chart.data(this.parseData(this.props.data));\r\n    this.chart.scale({\r\n      date: {\r\n        range: [0, 1],\r\n      },\r\n      cases: {\r\n        nice: true,\r\n      },\r\n    });\r\n\r\n    this.chart.tooltip({\r\n      showCrosshairs: true,\r\n      shared: true,\r\n    });\r\n\r\n    this.chart\r\n      .line()\r\n      .position('date*cases')\r\n      .color('country')\r\n      .shape('smooth');\r\n\r\n    this.chart\r\n      .point()\r\n      .position('date*cases')\r\n      .color('country')\r\n      .shape('circle');\r\n\r\n    this.chart.render();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"containerHistory\" className=\"container\" />\r\n    );\r\n  }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport DataSet from '@antv/data-set';\r\nimport { Chart } from '@antv/g2';\r\nimport * as worldData from './world.geo.json'\r\n\r\nexport class GlobeChart extends Component {\r\n  componentDidMount() {\r\n    window.addEventListener('resize', this.updateChartSize)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.updateChartSize)\r\n  }\r\n\r\n  updateChartSize = () => {\r\n    const element = document.getElementById('containerGlobe')\r\n    this.chart.changeSize(element.offsetWidth - 10, element.offsetHeight - 10)\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const mapData = worldData.default;\r\n    const confirmedLocations = this.props.data;\r\n    const element = document.getElementById('containerGlobe')\r\n\r\n    this.chart = new Chart({\r\n      container: 'containerGlobe',\r\n      height: element.offsetHeight - 10,\r\n      width: element.offsetWidth - 10,\r\n      padding: [0, 20, 40]\r\n    });\r\n    // force sync scales\r\n    this.chart.scale({\r\n      x: { sync: true },\r\n      y: { sync: true }\r\n    });\r\n    this.chart.coordinate('rect').reflect('y');\r\n    this.chart.legend(false);\r\n    this.chart.axis(false);\r\n\r\n    // data set\r\n    const ds = new DataSet();\r\n\r\n    // draw the map\r\n    const dv = ds.createView('back')\r\n      .source(mapData, {\r\n        type: 'GeoJSON'\r\n      })\r\n      .transform({\r\n        type: 'geo.projection',\r\n        projection: 'geoMercator',\r\n        as: ['x', 'y', 'centroidX', 'centroidY']\r\n      });\r\n    const bgView = this.chart.createView();\r\n    bgView.data(dv.rows);\r\n    bgView.tooltip(false);\r\n    bgView.polygon()\r\n      .position('x*y')\r\n      .style({\r\n        fill: '#DDDDDD',\r\n        stroke: '#b1b1b1',\r\n        lineWidth: 0.5,\r\n        fillOpacity: 0.85\r\n      });\r\n\r\n    // draw the bubble plot\r\n    const userData = ds.createView().source(confirmedLocations);\r\n    userData.transform({\r\n      type: 'map',\r\n      callback: obj => {\r\n        const projectedCoord = dv.geoProjectPosition([obj.coordinates.long, obj.coordinates.lat], 'geoMercator');\r\n        obj.x = projectedCoord[0];\r\n        obj.y = projectedCoord[1];\r\n        obj.deaths = obj.latest;\r\n        return obj;\r\n      }\r\n    });\r\n    const pointView = this.chart.createView();\r\n    this.chart.tooltip({ showTitle: false })\r\n    pointView.data(userData.rows);\r\n    pointView.point()\r\n      .position('x*y')\r\n      .size('deaths', [2, 30])\r\n      .shape('circle')\r\n      .color('#FF2F29')\r\n      .tooltip('country*deaths')\r\n      .style({\r\n        fillOpacity: 0.45,\r\n      })\r\n      .state({\r\n        active: {\r\n          style: {\r\n            lineWidth: 1,\r\n            stroke: '#FF2F29'\r\n          }\r\n        }\r\n      });\r\n    pointView.interaction('element-active');\r\n    this.chart.render();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"containerGlobe\" className=\"container\" />\r\n    );\r\n  }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { Chart } from '@antv/g2';\r\n\r\nexport class BarChart extends Component {\r\n  componentDidMount() {\r\n    window.addEventListener('resize', this.updateChartSize)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.updateChartSize)\r\n  }\r\n\r\n  updateChartSize = () => {\r\n    const element = document.getElementById('containerBar')\r\n    this.chart.changeSize(element.offsetWidth - 10, element.offsetHeight - 10)\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const element = document.getElementById('containerBar')\r\n    this.chart = new Chart({\r\n      container: element,\r\n      height: element.offsetHeight - 10,\r\n      width: element.offsetWidth - 10,\r\n    });\r\n    this.props.data.sort(function (a, b) { return a.value - b.value })\r\n    console.log(this.props.data)\r\n    this.chart.data(this.props.data);\r\n    this.chart.scale({\r\n      value: {\r\n        max: 100000,\r\n        min: 0\r\n      },\r\n    });\r\n    this.chart.axis('type', {\r\n      title: null,\r\n      tickLine: null,\r\n      line: null,\r\n    });\r\n\r\n    this.chart.axis('value', {\r\n      label: null,\r\n      title: {\r\n        offset: 30,\r\n        style: {\r\n          fontSize: 12,\r\n          fontWeight: 300,\r\n        },\r\n      },\r\n    });\r\n    this.chart.legend(false);\r\n    this.chart.coordinate().transpose();\r\n    this.chart\r\n      .interval()\r\n      .position('type*value')\r\n      .size(26)\r\n      .label('value', {\r\n        style: {\r\n          fill: '#8d8d8d',\r\n        },\r\n        offset: 10,\r\n      });\r\n    this.chart.interaction('element-active');\r\n    this.chart.render();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"containerBar\" className=\"container\" />\r\n    );\r\n  }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { Chart } from '@antv/g2';\r\n\r\nexport class EvolutionChart extends Component {\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.updateChartSize)\r\n  }\r\n\r\n  daysBetweenDates(date1, date2) {\r\n    const timeBetween = date2.getTime() - date1.getTime();\r\n    return timeBetween / (1000 * 60 * 60 * 24);\r\n  }\r\n\r\n  updateChartSize = () => {\r\n    const element = document.getElementById('containerEvolution')\r\n    this.chart.changeSize(element.offsetWidth - 10, element.offsetHeight - 10)\r\n  }\r\n\r\n  parseData(data) {\r\n    const values = data.map(country => {\r\n      const historyKeys = Object.keys(country.confirmed.history).filter(date => country.confirmed.history[date] > 0);\r\n      historyKeys.sort(function (a, b) {\r\n        a = new Date(a);\r\n        b = new Date(b);\r\n        return a.getTime() - b.getTime();\r\n      });\r\n      const firstDay = new Date(historyKeys[0]);\r\n      return historyKeys.map((date, index) => (\r\n        index === 0 ?\r\n          {\r\n            country: country.name,\r\n            time: 0,\r\n            cases: country.confirmed.history[date]\r\n          } :\r\n          {\r\n            country: country.name,\r\n            time: this.daysBetweenDates(firstDay, new Date(date)),\r\n            cases: country.confirmed.history[date]\r\n          }\r\n      ));\r\n    });\r\n    return [].concat.apply([], values);\r\n  }\r\n\r\n  parseDate(date) {\r\n    return `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const data = this.parseData(this.props.data);\r\n    console.log(data);\r\n    this.chart.changeData(data);\r\n\r\n    this.chart\r\n      .line()\r\n      .position('time*cases')\r\n      .color('country')\r\n      .shape('smooth');\r\n\r\n    this.chart\r\n      .point()\r\n      .position('time*cases')\r\n      .color('country')\r\n      .shape('circle');\r\n\r\n    this.chart.tooltip({ showTitle: false })\r\n\r\n    this.updateChartSize();\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('resize', this.updateChartSize)\r\n    const element = document.getElementById('containerEvolution')\r\n    this.chart = new Chart({\r\n      container: element,\r\n      height: element.offsetHeight - 10,\r\n      autoFit: true,\r\n      padding: 50,\r\n      renderer: 'svg'\r\n    });\r\n    this.chart.tooltip({ showTitle: false })\r\n    this.chart.data(this.parseData(this.props.data));\r\n    this.chart.scale({\r\n      time: {\r\n       sync: true,\r\n       min: 0\r\n      },\r\n      cases: {\r\n        nice: true,\r\n      },\r\n    });\r\n\r\n    this.chart.tooltip({\r\n      showCrosshairs: true,\r\n      shared: true,\r\n    });\r\n\r\n    this.chart\r\n      .line()\r\n      .position('time*cases')\r\n      .color('country')\r\n      .shape('smooth');\r\n\r\n    this.chart\r\n      .point()\r\n      .position('time*cases')\r\n      .color('country')\r\n      .shape('circle');\r\n\r\n    this.chart.render();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"containerEvolution\" className=\"container\" />\r\n    );\r\n  }\r\n}\r\n\r\n","import React, { Component } from 'react';\nimport covidDataApi from 'jhucsse.covid';\nimport { AppFooter } from './Footer'\nimport { GlobeChart } from './globeChart';\nimport { BarChart } from './barChart';\nimport { Layout } from 'antd';\nimport './App.css';\nimport { HistoryChart } from './Charts/History';\nimport { EvolutionChart } from './Charts/Evolution';\n\nconst { Header, Footer, Content } = Layout;\n\nclass App extends Component {\n  state = { data: {}, selectedData: [] }\n\n  onCountriesSelected = (selectedCountries) => {\n    this.setState({\n      selectedData: selectedCountries.map(country => this.state.data[country])\n    });\n  }\n\n  parseData(covidData) {\n    const countries = {};\n    function mergeHistory(history1, history2) {\n      Object.keys(history2).forEach(key => history1[key] = (history1[key] || 0) + history2[key])\n      return history1;\n    }\n\n    function parseData(data, type) {\n      data.locations.forEach(location => {\n        if (!countries[location.country]) {\n          countries[location.country] = {\n            name: location.country,\n            coordinates: location.coordinates,\n            confirmed: { provinces: {}, cases: 0, history: {} },\n            deaths: { provinces: {}, cases: 0, history: {} },\n            recovered: { provinces: {}, cases: 0, history: {} }\n          }\n        }\n\n        const typeMap = countries[location.country][type];\n\n        typeMap.cases += location.latest;\n        typeMap.history = mergeHistory(typeMap.history, location.history);\n\n        if (location.province !== \"\") {\n          typeMap.provinces[location.province] = {\n            name: location.province,\n            cases: location.latest,\n            history: location.history\n          }\n        }\n      });\n    }\n\n    parseData(covidData.confirmed, 'confirmed');\n    parseData(covidData.deaths, 'deaths');\n    parseData(covidData.recovered, 'recovered');\n    return countries;\n  }\n\n  componentDidMount() {\n    covidDataApi.all()\n      .then(covidData => {\n        this.setState({ data: this.parseData(covidData) });\n        // this.setState({\n        //   globeData: covidData.confirmed.locations.filter(location => location.latest > 0),\n        //   barData: this.getCasesByCountry(covidData)\n        // })\n      });\n  }\n\n  render() {\n    return (\n      <Layout className=\"App\">\n        <Header>Header</Header>\n        <Content>\n          <div className=\"mainContent\">\n            <HistoryChart data={this.state.selectedData} />\n            <EvolutionChart data={this.state.selectedData} />\n          </div>\n        </Content>\n        <AppFooter countries={Object.values(this.state.data)} onChange={this.onCountriesSelected} />\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}