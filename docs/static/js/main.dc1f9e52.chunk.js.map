{"version":3,"sources":["Assets/Covid-19-Charts.png","Charts/History.js","Charts/Evolution.js","Charts/BarCases.js","Charts/LogEvolution.js","Data/APIService.js","Data/DataManager.js","Content/ChartsContent.js","Charts/WorldChart.js","Content/StatsContent.js","Components/Footer.js","Content/Content.js","Components/App.js","serviceWorker.js","index.js"],"names":["module","exports","HistoryChart","updateChartSize","element","document","getElementById","chart","changeSize","offsetWidth","offsetHeight","window","removeEventListener","this","data","values","map","country","Object","keys","confirmed","history","date","name","Date","cases","concat","apply","getMonth","getDate","getFullYear","parseData","props","changeData","line","position","color","shape","tooltip","showTitle","highestNumberOfCases","forEach","d","scale","alias","max","render","addEventListener","Chart","container","height","renderer","range","nice","showCrosshairs","shared","axis","label","formatter","val","Number","parseDate","title","offset","style","fill","id","className","Component","EvolutionChart","date1","date2","getTime","historyKeys","filter","sort","a","b","firstDay","index","time","daysBetweenDates","sync","min","BarCasesChart","deaths","dv","DataSet","createView","source","transform","type","fields","key","value","retains","rows","interval","adjust","showMarkers","interaction","coordinate","transpose","LogEvolutionChart","Math","log","apiService","baseURL","fetch","response","json","dataManager","listeners","callback","push","length","getLocations","covidData","console","byCountry","parseDataByCountry","total","getTotalData","countries","mergeHistory","history1","history2","locations","countryName","coordinates","code","country_code","updated","last_updated","provinces","latest","timelines","timeline","province","US","Option","Select","ChartsContent","updateCharts","countryNames","nameA","toUpperCase","nameB","setState","selectedCountries","onCountriesSelected","state","addListener","mode","flex","placeholder","defaultValue","onChange","size","WorldChart","setData","res","mostCases","colorScale","scaleSqrt","domain","zoom","geography","geographies","geo","properties","ISO_A2","NAME","rsmKey","stroke","StatsContent","updateStats","countriesData","tableColumns","dataIndex","alt","src","sorter","add0","String","getHours","getMinutes","covidLogo","suffix","parseTime","precision","dataSource","columns","pagination","Footer","Layout","AppFooter","Modal","info","content","href","target","onOk","onClick","Content","AppContent","setLoaded","loaded","top","App","pullData","Boolean","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dc1f9e52.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Covid-19-Charts.807e241c.png\";","import React, { Component } from 'react';\r\nimport { Chart } from '@antv/g2';\r\n\r\nexport class HistoryChart extends Component {\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.updateChartSize)\r\n  }\r\n\r\n  updateChartSize = () => {\r\n    const element = document.getElementById('containerHistory')\r\n    this.chart.changeSize(element.offsetWidth - 10, element.offsetHeight >= 400 ? element.offsetHeight - 10 : 400)\r\n  }\r\n\r\n  parseData(data) {\r\n    const values = data.map(country => {\r\n      return Object.keys(country.confirmed.history).map(date => (\r\n        { country: country.name, date: new Date(date), cases: country.confirmed.history[date] }\r\n      ));\r\n    });\r\n    return [].concat.apply([], values);\r\n  }\r\n\r\n  parseDate(date) {\r\n    return `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const data = this.parseData(this.props.data);\r\n    this.chart.changeData(data);\r\n\r\n    this.chart\r\n      .line()\r\n      .position('date*cases')\r\n      .color('country')\r\n      .shape('smooth');\r\n\r\n    this.chart.tooltip({ showTitle: false });\r\n\r\n    let highestNumberOfCases = 0;\r\n\r\n    data.forEach(d => {\r\n      highestNumberOfCases = d.cases > highestNumberOfCases ? d.cases : highestNumberOfCases;\r\n    });\r\n\r\n    this.chart.scale('cases', {\r\n      alias: 'Number of cases',\r\n      max: highestNumberOfCases + 0.2 * highestNumberOfCases\r\n    });\r\n\r\n    this.chart.render();\r\n\r\n    this.updateChartSize();\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('resize', this.updateChartSize)\r\n    const element = document.getElementById('containerHistory')\r\n    this.chart = new Chart({\r\n      container: element,\r\n      height: element.offsetHeight >= 400 ? element.offsetHeight - 10 : 400,\r\n      renderer: 'svg'\r\n    });\r\n    this.chart.tooltip({ showTitle: false })\r\n    this.chart.data(this.parseData(this.props.data));\r\n    this.chart.scale({\r\n      date: {\r\n        range: [0, 1],\r\n      },\r\n      cases: {\r\n        nice: true,\r\n      },\r\n    });\r\n\r\n    this.chart.tooltip({\r\n      showCrosshairs: true,\r\n      shared: true,\r\n    });\r\n\r\n    this.chart.scale('date', {\r\n      alias: 'Date (mm/dd/yyyy)'\r\n    });\r\n\r\n    this.chart.axis('date', {\r\n      label: {\r\n        formatter: (val) => {\r\n          const date = new Date(Number(val));\r\n          return this.parseDate(date);\r\n        }\r\n      },\r\n      title: {\r\n        offset: 20,\r\n        style: {\r\n          fill: '#aaa'\r\n        }\r\n      }\r\n    });\r\n\r\n    this.chart.scale('cases', {\r\n      alias: 'Number of cases'\r\n    });\r\n\r\n    this.chart.axis('cases', {\r\n      title: {\r\n        offset: 20,\r\n        style: {\r\n          fill: '#aaa'\r\n        }\r\n      }\r\n    });\r\n\r\n    this.chart.render();\r\n    this.updateChartSize();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"containerHistory\" className=\"container\" />\r\n    );\r\n  }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { Chart } from '@antv/g2';\r\n\r\nexport class EvolutionChart extends Component {\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.updateChartSize)\r\n  }\r\n\r\n  daysBetweenDates(date1, date2) {\r\n    const timeBetween = date2.getTime() - date1.getTime();\r\n    return timeBetween / (1000 * 60 * 60 * 24);\r\n  }\r\n\r\n  updateChartSize = () => {\r\n    const element = document.getElementById('containerEvolution')\r\n    this.chart.changeSize(element.offsetWidth - 10, element.offsetHeight >= 400 ? element.offsetHeight - 10 : 400)\r\n  }\r\n\r\n  parseData(data) {\r\n    const values = data.map(country => {\r\n      const historyKeys = Object.keys(country.confirmed.history).filter(date => country.confirmed.history[date] > 0);\r\n      historyKeys.sort(function (a, b) {\r\n        a = new Date(a);\r\n        b = new Date(b);\r\n        return a.getTime() - b.getTime();\r\n      });\r\n      const firstDay = new Date(historyKeys[0]);\r\n      return historyKeys.map((date, index) => (\r\n        index === 0 ?\r\n          {\r\n            country: country.name,\r\n            time: 0,\r\n            cases: country.confirmed.history[date]\r\n          } :\r\n          {\r\n            country: country.name,\r\n            time: this.daysBetweenDates(firstDay, new Date(date)),\r\n            cases: country.confirmed.history[date]\r\n          }\r\n      ));\r\n    });\r\n    return [].concat.apply([], values);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const data = this.parseData(this.props.data);\r\n    this.chart.changeData(data);\r\n\r\n    this.chart\r\n      .line()\r\n      .position('time*cases')\r\n      .color('country')\r\n      .shape('smooth');\r\n\r\n\r\n    this.chart.tooltip({ showTitle: false });\r\n\r\n    let highestNumberOfCases = 0;\r\n\r\n    data.forEach(d => {\r\n      highestNumberOfCases = d.cases > highestNumberOfCases ? d.cases : highestNumberOfCases;\r\n    });\r\n\r\n    this.chart.scale('cases', {\r\n      alias: 'Number of cases',\r\n      max: highestNumberOfCases + 0.2 * highestNumberOfCases\r\n    });\r\n\r\n    this.chart.render();\r\n\r\n    this.updateChartSize();\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('resize', this.updateChartSize)\r\n    const element = document.getElementById('containerEvolution')\r\n    this.chart = new Chart({\r\n      container: element,\r\n      height: element.offsetHeight >= 400 ? element.offsetHeight - 10 : 400,\r\n      renderer: 'svg'\r\n    });\r\n    this.chart.tooltip({ showTitle: false })\r\n    this.chart.data(this.parseData(this.props.data));\r\n    this.chart.scale({\r\n      time: {\r\n        sync: true,\r\n        min: 0\r\n      },\r\n      cases: {\r\n        nice: true,\r\n      },\r\n    });\r\n\r\n    this.chart.tooltip({\r\n      showCrosshairs: true,\r\n      shared: true,\r\n    });\r\n\r\n    this.chart.scale('time', {\r\n      alias: 'Days since the first case'\r\n    });\r\n\r\n    this.chart.axis('time', {\r\n      title: {\r\n        offset: 20,\r\n        style: {\r\n          fill: '#aaa'\r\n        }\r\n      }\r\n    });\r\n\r\n    this.chart.scale('cases', {\r\n      alias: 'Number of cases'\r\n    });\r\n\r\n    this.chart.axis('cases', {\r\n      title: {\r\n        offset: 20,\r\n        style: {\r\n          fill: '#aaa'\r\n        }\r\n      }\r\n    });\r\n\r\n    this.chart.render();\r\n    this.updateChartSize();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"containerEvolution\" className=\"container\" />\r\n    );\r\n  }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { Chart } from '@antv/g2';\r\nimport DataSet from '@antv/data-set';\r\n\r\nexport class BarCasesChart extends Component {\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.updateChartSize)\r\n  }\r\n\r\n  daysBetweenDates(date1, date2) {\r\n    const timeBetween = date2.getTime() - date1.getTime();\r\n    return timeBetween / (1000 * 60 * 60 * 24);\r\n  }\r\n\r\n  updateChartSize = () => {\r\n    const element = document.getElementById('containerBarCases')\r\n    this.chart.changeSize(element.offsetWidth - 10, element.offsetHeight >= 400 ? element.offsetHeight - 10 : 400)\r\n  }\r\n\r\n  parseData(data) {\r\n    return data.map(country => ({\r\n      name: country.name,\r\n      confirmed: country.confirmed.cases,\r\n      deaths: country.deaths.cases\r\n    }));\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const data = this.parseData(this.props.data);\r\n    const ds = new DataSet();\r\n    const dv = ds.createView().source(data);\r\n\r\n    dv.transform({\r\n      type: 'fold',\r\n      fields: ['confirmed', 'deaths'],\r\n      key: 'country',\r\n      value: 'cases',\r\n      retains: ['name']\r\n    });\r\n\r\n    this.chart.changeData(dv.rows);\r\n\r\n    this.chart\r\n      .interval()\r\n      .adjust('stack')\r\n      .position('name*cases')\r\n      .color('country');\r\n\r\n    this.chart.tooltip({\r\n      shared: true,\r\n      showMarkers: false,\r\n    });\r\n\r\n    this.chart.interaction('active-region');\r\n    this.chart.render();\r\n\r\n    this.updateChartSize();\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('resize', this.updateChartSize);\r\n    const element = document.getElementById('containerBarCases');\r\n\r\n    const ds = new DataSet();\r\n    const dv = ds.createView().source(this.parseData(this.props.data));\r\n    dv.transform({\r\n      type: 'fold',\r\n      fields: ['confirmed', 'deaths'],\r\n      key: 'country',\r\n      value: 'cases',\r\n      retains: ['name']\r\n    });\r\n\r\n\r\n    this.chart = new Chart({\r\n      container: element,\r\n      height: element.offsetHeight >= 400 ? element.offsetHeight - 10 : 400,\r\n      renderer: 'svg'\r\n    });\r\n\r\n    this.chart.coordinate().transpose();\r\n\r\n    this.chart.data(dv.rows);\r\n    this.chart.scale('cases', {\r\n      nice: true\r\n    });\r\n\r\n    this.chart.axis('name', {\r\n      label: {\r\n        offset: 12,\r\n      },\r\n    });\r\n\r\n    this.chart.tooltip({\r\n      shared: true,\r\n      showMarkers: false,\r\n    });\r\n\r\n\r\n    this.chart.render();\r\n\r\n    this.updateChartSize();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"containerBarCases\" className=\"container\" />\r\n    );\r\n  }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { Chart } from '@antv/g2';\r\n\r\nexport class LogEvolutionChart extends Component {\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.updateChartSize)\r\n  }\r\n\r\n  daysBetweenDates(date1, date2) {\r\n    const timeBetween = date2.getTime() - date1.getTime();\r\n    return timeBetween / (1000 * 60 * 60 * 24);\r\n  }\r\n\r\n  updateChartSize = () => {\r\n    const element = document.getElementById('containerLogEvolution');\r\n    this.chart.changeSize(element.offsetWidth - 10, element.offsetHeight >= 400 ? element.offsetHeight - 10 : 400);\r\n  }\r\n\r\n  parseData(data) {\r\n    const values = data.map(country => {\r\n      const historyKeys = Object.keys(country.confirmed.history).filter(date => country.confirmed.history[date] > 0);\r\n      historyKeys.sort(function (a, b) {\r\n        a = new Date(a);\r\n        b = new Date(b);\r\n        return a.getTime() - b.getTime();\r\n      });\r\n      const firstDay = new Date(historyKeys[0]);\r\n      return historyKeys.map((date, index) => (\r\n        index === 0 ?\r\n          {\r\n            country: country.name,\r\n            time: 0,\r\n            cases: Math.log(country.confirmed.history[date])\r\n          } :\r\n          {\r\n            country: country.name,\r\n            time: this.daysBetweenDates(firstDay, new Date(date)),\r\n            cases: Math.log(country.confirmed.history[date])\r\n          }\r\n      ));\r\n    });\r\n    return [].concat.apply([], values);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const data = this.parseData(this.props.data);\r\n    this.chart.changeData(data);\r\n\r\n    this.chart\r\n      .line()\r\n      .position('time*cases')\r\n      .color('country')\r\n      .shape('smooth');\r\n\r\n    this.chart.tooltip({ showTitle: false })\r\n\r\n    let highestNumberOfCases = 0;\r\n\r\n    data.forEach(d => {\r\n      highestNumberOfCases = d.cases > highestNumberOfCases ? d.cases : highestNumberOfCases;\r\n    });\r\n\r\n    this.chart.scale('cases', {\r\n      alias: 'Log Number of cases',\r\n      max: highestNumberOfCases + 0.2 * highestNumberOfCases\r\n    });\r\n\r\n    this.chart.render();\r\n\r\n    this.updateChartSize();\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('resize', this.updateChartSize)\r\n    const element = document.getElementById('containerLogEvolution')\r\n    this.chart = new Chart({\r\n      container: element,\r\n      height: element.offsetHeight >= 400 ? element.offsetHeight - 10 : 400,\r\n      renderer: 'svg'\r\n    });\r\n    this.chart.tooltip({ showTitle: false })\r\n    const data = this.parseData(this.props.data);\r\n    this.chart.data(data);\r\n    this.chart.scale({\r\n      time: {\r\n        sync: true,\r\n        min: 0\r\n      },\r\n      cases: {\r\n        nice: true,\r\n      },\r\n    });\r\n\r\n    this.chart.tooltip({\r\n      showCrosshairs: true,\r\n      shared: true,\r\n    });\r\n\r\n    this.chart.scale('time', {\r\n      alias: 'Days since the first case'\r\n    });\r\n\r\n    this.chart.axis('time', {\r\n      title: {\r\n        offset: 20,\r\n        style: {\r\n          fill: '#aaa'\r\n        }\r\n      }\r\n    });\r\n\r\n    this.chart.scale('cases', {\r\n      alias: 'Log Number of cases'\r\n    });\r\n\r\n    this.chart.axis('cases', {\r\n      title: {\r\n        offset: 20,\r\n        style: {\r\n          fill: '#aaa'\r\n        }\r\n      }\r\n    });\r\n\r\n    this.updateChartSize();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"containerLogEvolution\" className=\"container\" />\r\n    );\r\n  }\r\n}\r\n\r\n","class APIService {\r\n  constructor() {\r\n    this.baseURL = 'https://coronavirus-tracker-api.herokuapp.com/v2'\r\n  }\r\n\r\n  async getLocations() {\r\n    const response = await fetch(`${this.baseURL}/locations?timelines=1`);\r\n    return await response.json();\r\n  }\r\n}\r\n\r\nexport const apiService = new APIService();","import { apiService } from './APIService';\r\n\r\nclass DataManager {\r\n  constructor() {\r\n    this.data = {}\r\n\r\n    this.listeners = [];\r\n  }\r\n\r\n  addListener(callback) {\r\n    this.listeners.push(callback);\r\n    if (Object.values(this.data).length > 0) {\r\n      callback(this.data);\r\n    }\r\n  }\r\n\r\n  async pullData() {\r\n    const covidData = await apiService.getLocations();\r\n    console.log(covidData);\r\n    this.data.byCountry = this.parseDataByCountry(covidData);\r\n    this.data.total = this.getTotalData(covidData);\r\n    this.listeners.forEach(callback => callback(this.data));\r\n  }\r\n\r\n  parseDataByCountry(covidData) {\r\n    const countries = {};\r\n    function mergeHistory(history1, history2) {\r\n      Object.keys(history2).forEach(key => history1[key] = (history1[key] || 0) + history2[key])\r\n      return history1;\r\n    }\r\n\r\n    covidData.locations.forEach(country => {\r\n      const countryName = country.country;\r\n      if (!countries[countryName]) {\r\n        countries[countryName] = {\r\n          name: countryName,\r\n          coordinates: country.coordinates,\r\n          code: country.country_code,\r\n          updated: country.last_updated,\r\n          confirmed: { provinces: {}, cases: 0, history: {} },\r\n          deaths: { provinces: {}, cases: 0, history: {} },\r\n        };\r\n      }\r\n\r\n      countries[countryName].confirmed.cases += country.latest.confirmed;\r\n      countries[countryName].confirmed.history = mergeHistory(\r\n        countries[countryName].confirmed.history,\r\n        country.timelines.confirmed.timeline\r\n      );\r\n      countries[countryName].deaths.cases += country.latest.deaths;\r\n      countries[countryName].deaths.history = mergeHistory(\r\n        countries[countryName].deaths.history,\r\n        country.timelines.deaths.timeline\r\n      );\r\n\r\n      if (country.province !== \"\") {\r\n        countries[countryName].confirmed.provinces[country.province] = {\r\n          name: country.province,\r\n          cases: country.latest.confirmed,\r\n          history: country.timelines.confirmed.timeline\r\n        }\r\n        countries[countryName].deaths.provinces[country.province] = {\r\n          name: country.province,\r\n          cases: country.latest.deaths,\r\n          history: country.timelines.deaths.timeline\r\n        }\r\n      }\r\n    });\r\n    return countries;\r\n  }\r\n\r\n  getTotalData(covidData) {\r\n    const updated = this.data.byCountry.US.updated;\r\n    return {\r\n      confirmed: { cases: covidData.latest.confirmed, updated },\r\n      deaths: { cases: covidData.latest.deaths, updated }\r\n    }\r\n  }\r\n}\r\n\r\nexport const dataManager = new DataManager();","import React, { Component } from 'react';\r\nimport { HistoryChart } from '../Charts/History';\r\nimport { EvolutionChart } from '../Charts/Evolution';\r\nimport { Card, Select } from 'antd';\r\nimport { BarCasesChart } from '../Charts/BarCases';\r\nimport { LogEvolutionChart } from '../Charts/LogEvolution';\r\nimport { dataManager } from '../Data/DataManager';\r\n\r\nconst { Option } = Select;\r\n\r\nexport class ChartsContent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      data: {},\r\n      countryNames: [],\r\n      selectedCountries: []\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    dataManager.addListener(this.updateCharts);\r\n  }\r\n\r\n  updateCharts = (data) => {\r\n    const countryNames = Object.values(data.byCountry);\r\n    countryNames.sort(function (a, b) {\r\n      var nameA = a.name.toUpperCase(); // ignore upper and lowercase\r\n      var nameB = b.name.toUpperCase(); // ignore upper and lowercase\r\n      if (nameA < nameB) {\r\n        return -1;\r\n      }\r\n      if (nameA > nameB) {\r\n        return 1;\r\n      }\r\n\r\n      // names must be equal\r\n      return 0;\r\n    });\r\n    this.setState({ countryNames, data: data.byCountry, selectedCountries: ['Spain', 'Italy'] })\r\n  }\r\n\r\n  onCountriesSelected = (selectedCountries) => {\r\n    this.setState({\r\n      selectedCountries\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"chartsContent\">\r\n        <div className=\"countriesSelector\">\r\n          <span>Select the Countries you wish to see data: </span>\r\n          <Select\r\n            mode=\"multiple\"\r\n            style={{ flex: 1 }}\r\n            placeholder=\"Countries\"\r\n            defaultValue={['Spain', 'Italy']}\r\n            onChange={this.onCountriesSelected}\r\n          >\r\n            {\r\n              this.state.countryNames.map(country => <Option key={country.name}>{country.name}</Option>)\r\n            }\r\n          </Select>\r\n        </div>\r\n        <div className=\"chartsContainer\">\r\n          <Card title=\"History\" size=\"small\">\r\n            <HistoryChart data={this.state.selectedCountries.map(country => this.state.data[country])} />\r\n          </Card>\r\n          <Card title=\"Evolution\" size=\"small\">\r\n            <EvolutionChart data={this.state.selectedCountries.map(country => this.state.data[country])} />\r\n          </Card>\r\n          <Card title=\"Cases Bar\" size=\"small\">\r\n            <BarCasesChart data={this.state.selectedCountries.map(country => this.state.data[country])} />\r\n          </Card>\r\n          <Card title=\"Logarithmic Evolution\" size=\"small\">\r\n            <LogEvolutionChart data={this.state.selectedCountries.map(country => this.state.data[country])} />\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { dataManager } from '../Data/DataManager';\r\nimport { scaleSqrt } from \"d3-scale\";\r\nimport {\r\n  ComposableMap,\r\n  Geographies,\r\n  Geography,\r\n  ZoomableGroup\r\n} from \"react-simple-maps\";\r\nimport { Tooltip } from 'antd';\r\n\r\nexport class WorldChart extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      data: {},\r\n      mostCases: 0\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.updateChartSize)\r\n  }\r\n\r\n  daysBetweenDates(date1, date2) {\r\n    const timeBetween = date2.getTime() - date1.getTime();\r\n    return timeBetween / (1000 * 60 * 60 * 24);\r\n  }\r\n\r\n  updateChartSize = () => {\r\n    const element = document.getElementById('worldChart');\r\n    this.chart.changeSize(element.offsetWidth - 10, element.offsetHeight >= 400 ? element.offsetHeight - 10 : 400)\r\n  }\r\n\r\n  setData = (data) => {\r\n    const res = {};\r\n    let mostCases = 0;\r\n    Object.values(data.byCountry).forEach(country => {\r\n      res[country.code] = country;\r\n      mostCases = country.confirmed.cases > mostCases ? country.confirmed.cases : mostCases;\r\n    });\r\n\r\n    this.setState({ data: res, mostCases });\r\n  }\r\n\r\n  componentDidMount() {\r\n    dataManager.addListener(this.setData);\r\n  }\r\n\r\n  render() {\r\n    const colorScale = scaleSqrt()\r\n      .domain([0, this.state.mostCases])\r\n      .range([\"#fce4ec\", \"#d32f2f\"]);\r\n\r\n    return (\r\n      <div className=\"container\" id=\"worldChart\">\r\n        <ComposableMap>\r\n          <ZoomableGroup zoom={1}>\r\n            <Geographies geography=\"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\">\r\n              {({ geographies }) =>\r\n                geographies.map(geo => {\r\n                  const country = this.state.data[geo.properties.ISO_A2];\r\n                  const cases = country ? country.confirmed.cases : 0;\r\n                  return (\r\n                    <Tooltip\r\n                      title={`${geo.properties.NAME}: ${cases}`}\r\n                      key={geo.rsmKey}\r\n                    >\r\n                      <Geography\r\n                        stroke=\"#fafafa\"\r\n                        fill={colorScale(cases)}\r\n                        key={geo.rsmKey}\r\n                        geography={geo}\r\n                      />\r\n                    </Tooltip>\r\n                  )\r\n                })\r\n              }\r\n            </Geographies>\r\n          </ZoomableGroup>\r\n        </ComposableMap>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { Statistic, Card, Table } from 'antd';\r\nimport { dataManager } from '../Data/DataManager';\r\nimport { WorldChart } from '../Charts/WorldChart';\r\nimport covidLogo from '../Assets/Covid-19-Charts.png';\r\n\r\nexport class StatsContent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.tableColumns = [\r\n      {\r\n        title: 'Name',\r\n        dataIndex: 'name',\r\n        key: 'name',\r\n        render: name => (\r\n          <div className=\"tableName\">\r\n            <img alt={name} src={`https://www.countryflags.io/${dataManager.data.byCountry[name].code}/flat/24.png`} />\r\n            <span>{name}</span>\r\n          </div>\r\n        )\r\n      },\r\n      {\r\n        title: 'Confirmed Cases',\r\n        dataIndex: 'confirmed',\r\n        key: 'confirmed',\r\n        sorter: (a, b) => a.confirmed - b.confirmed\r\n      },\r\n      {\r\n        title: 'Death Cases',\r\n        dataIndex: 'deaths',\r\n        key: 'deaths',\r\n        sorter: (a, b) => a.deaths - b.deaths\r\n      }\r\n    ];\r\n\r\n    this.state = {\r\n      data: {\r\n        byCountry: [],\r\n        total: {\r\n          confirmed: {},\r\n          deaths: {}\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    dataManager.addListener(this.updateStats);\r\n  }\r\n\r\n  updateStats = (data) => {\r\n    const countriesData = Object.values(data.byCountry).map(country => ({\r\n      name: country.name,\r\n      confirmed: country.confirmed.cases,\r\n      deaths: country.deaths.cases\r\n    }));\r\n    countriesData.sort((a, b) => b.confirmed - a.confirmed);\r\n    this.setState({ data: { byCountry: countriesData, total: data.total } })\r\n  }\r\n\r\n  parseDate(date) {\r\n    date = new Date(date);\r\n    return `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`\r\n  }\r\n\r\n  parseTime(date) {\r\n    date = new Date(date);\r\n    function add0(time) {\r\n      time = String(time);\r\n      return time.length === 1 ? \"0\" + time : time\r\n    }\r\n    return `${add0(date.getHours())}:${add0(date.getMinutes())}`\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"statsContent\">\r\n        <div className=\"header\">\r\n          <div className=\"logoContainer\">\r\n            <img className=\"header-title\" src={covidLogo} alt=\"Covid Logo\" />\r\n          </div>\r\n          <Statistic\r\n            title=\"Last Updated\"\r\n            value={this.parseDate(dataManager.data.total.confirmed.updated)}\r\n            suffix={this.parseTime(dataManager.data.total.confirmed.updated)}\r\n          />\r\n        </div>\r\n        <Card size=\"small\" title=\"Global Stats\">\r\n          <div className=\"statsContainer\">\r\n            <Statistic\r\n              title=\"Confirmed\"\r\n              className=\"blue start\"\r\n              value={this.state.data.total.confirmed.cases}\r\n            />\r\n            <Statistic\r\n              title=\"Deaths\" \r\n              className=\"cyan mid\"\r\n              value={this.state.data.total.deaths.cases}\r\n            />\r\n            <Statistic\r\n              title=\"Death Rate\"\r\n              className=\"red end\"\r\n              value={(this.state.data.total.deaths.cases / this.state.data.total.confirmed.cases) * 100}\r\n              precision={2}\r\n              suffix='%'\r\n            />\r\n          </div>\r\n        </Card>\r\n        <div className=\"countriesRow\">\r\n          <Card title=\"World\" size=\"small\">\r\n            <WorldChart />\r\n          </Card>\r\n          <Card className=\"countriesTableContainer\" size=\"small\" title=\"Cases by Country\">\r\n            <Table\r\n              className=\"countriesTable\"\r\n              dataSource={this.state.data.byCountry}\r\n              columns={this.tableColumns}\r\n              pagination={false}\r\n              size=\"middle\"\r\n            />\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { Layout, Modal, Button } from 'antd';\r\n\r\nconst { Footer } = Layout;\r\n\r\nexport class AppFooter extends Component {\r\n  info() {\r\n    Modal.info({\r\n      title: 'Data Disclaimer',\r\n      content: (\r\n        <div>\r\n          <p>Page that aims to help people to analyze data about covid-19.</p>\r\n          <p>All information comes from the <a href=\"https://github.com/CSSEGISandData/COVID-19\" target=\"blank\">  2019 Novel Coronavirus COVID-19 (2019-nCoV) Data Repository.</a></p>\r\n        </div>\r\n      ),\r\n      onOk() { },\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Footer className=\"footer\">\r\n        <span>\r\n          Made By Joao Pedro Pianta\r\n        </span>\r\n        <Button type=\"default\" onClick={this.info}>\r\n          Data Disclaimer\r\n        </Button>\r\n      </Footer>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { Layout, Spin } from 'antd';\r\nimport { ChartsContent } from './ChartsContent';\r\nimport { StatsContent } from './StatsContent';\r\nimport { dataManager } from '../Data/DataManager';\r\nimport { AppFooter } from '../Components/Footer';\r\n\r\nconst { Content } = Layout;\r\n\r\nexport class AppContent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      loaded: false\r\n    }\r\n\r\n    dataManager.addListener(this.setLoaded);\r\n  }\r\n\r\n  setLoaded = () => {\r\n    this.setState({ loaded: true });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Content className=\"mainContainer\">\r\n        {\r\n          this.state.loaded ?\r\n            <div className=\"mainContent\">\r\n              <StatsContent />\r\n              <ChartsContent />\r\n              <AppFooter />\r\n            </div> :\r\n            <Spin style={{position: 'absolute', top: '50%'}} />\r\n        }\r\n      </Content>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\nimport { Layout } from 'antd';\nimport '../Style/Components/App.scss';\nimport { AppContent } from '../Content/Content';\nimport { dataManager } from '../Data/DataManager';\n\nclass App extends Component {\n  componentDidMount() {\n    dataManager.pullData();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Layout className=\"App\">\n          <AppContent />\n        </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}